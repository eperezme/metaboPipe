# The sample IDs must be identical to the metabolomics data;
# The column after sample IDs should be the primary metadata of interest;
# The metadata can contain either categorical (with at least three replicates per group) or continuous values (covariates);
# Missing values are not allowed - you will be asked to manually "fix" the missing values if detected
# A screenshot of a metadata table is shown below.
SummarizedExperiment::colData(experiment) %>%
as_tibble()
library(SummarizedExperiment)
SummarizedExperiment::assay(experiment) %>%
as_tibble() %>%
# Create the metadata table
# Metadata table containing multiple factors and covariates
# This is a general table containing various descriptors for the data to be analyzed
#
# The sample IDs must be identical to the metabolomics data;
# The column after sample IDs should be the primary metadata of interest;
# The metadata can contain either categorical (with at least three replicates per group) or continuous values (covariates);
# Missing values are not allowed - you will be asked to manually "fix" the missing values if detected
# A screenshot of a metadata table is shown below.
colData(experiment) %>%
as_tibble()
library(structToolbox)
SummarizedExperiment::assay(experiment) %>%
as_tibble() %>%
# Create the metadata table
# Metadata table containing multiple factors and covariates
# This is a general table containing various descriptors for the data to be analyzed
#
# The sample IDs must be identical to the metabolomics data;
# The column after sample IDs should be the primary metadata of interest;
# The metadata can contain either categorical (with at least three replicates per group) or continuous values (covariates);
# Missing values are not allowed - you will be asked to manually "fix" the missing values if detected
# A screenshot of a metadata table is shown below.
colData(experiment) %>%
as_tibble()
SummarizedExperiment::assay(experiment) %>%
as_tibble() %>%
# Create the metadata table
# Metadata table containing multiple factors and covariates
# This is a general table containing various descriptors for the data to be analyzed
#
# The sample IDs must be identical to the metabolomics data;
# The column after sample IDs should be the primary metadata of interest;
# The metadata can contain either categorical (with at least three replicates per group) or continuous values (covariates);
# Missing values are not allowed - you will be asked to manually "fix" the missing values if detected
# A screenshot of a metadata table is shown below.
colData(experiment)
# Load the experiment
tar_load("experiment")
SummarizedExperiment::assay(experiment) %>%
as_tibble() %>%
# Create the metadata table
# Metadata table containing multiple factors and covariates
# This is a general table containing various descriptors for the data to be analyzed
#
# The sample IDs must be identical to the metabolomics data;
# The column after sample IDs should be the primary metadata of interest;
# The metadata can contain either categorical (with at least three replicates per group) or continuous values (covariates);
# Missing values are not allowed - you will be asked to manually "fix" the missing values if detected
# A screenshot of a metadata table is shown below.
colData(experiment)
suppressPackageStartupMessages({
# Bioconductor packages
library(SummarizedExperiment)
library(structToolbox)
library(pmp)
library(ropls)
library(BiocFileCache)
# CRAN libraries
library(ggplot2)
library(gridExtra)
library(cowplot)
library(openxlsx)
library(VIM)
library(dplyr)
library(caret)
library(missForest)
library(pcaMethods)
library(parallel)
})
SummarizedExperiment::assay(experiment) %>%
as_tibble() %>%
# Create the metadata table
# Metadata table containing multiple factors and covariates
# This is a general table containing various descriptors for the data to be analyzed
#
# The sample IDs must be identical to the metabolomics data;
# The column after sample IDs should be the primary metadata of interest;
# The metadata can contain either categorical (with at least three replicates per group) or continuous values (covariates);
# Missing values are not allowed - you will be asked to manually "fix" the missing values if detected
# A screenshot of a metadata table is shown below.
colData(experiment)
SummarizedExperiment::assay(experiment) %>%
as_tibble() %>%
# Create the metadata table
# Metadata table containing multiple factors and covariates
# This is a general table containing various descriptors for the data to be analyzed
#
# The sample IDs must be identical to the metabolomics data;
# The column after sample IDs should be the primary metadata of interest;
# The metadata can contain either categorical (with at least three replicates per group) or continuous values (covariates);
# Missing values are not allowed - you will be asked to manually "fix" the missing values if detected
# A screenshot of a metadata table is shown below.
SummarizedExperiment::colData(experiment)
View(experiment)
SummarizedExperiment::assay(experiment) %>%
as_tibble() %>%
# Create the metadata table
# Metadata table containing multiple factors and covariates
# This is a general table containing various descriptors for the data to be analyzed
#
# The sample IDs must be identical to the metabolomics data;
# The column after sample IDs should be the primary metadata of interest;
# The metadata can contain either categorical (with at least three replicates per group) or continuous values (covariates);
# Missing values are not allowed - you will be asked to manually "fix" the missing values if detected
# A screenshot of a metadata table is shown below.
SummarizedExperiment::colData(experiment@colData)
SummarizedExperiment::assay(experiment) %>%
as_tibble() %>%
# Create the metadata table
# Metadata table containing multiple factors and covariates
# This is a general table containing various descriptors for the data to be analyzed
#
# The sample IDs must be identical to the metabolomics data;
# The column after sample IDs should be the primary metadata of interest;
# The metadata can contain either categorical (with at least three replicates per group) or continuous values (covariates);
# Missing values are not allowed - you will be asked to manually "fix" the missing values if detected
# A screenshot of a metadata table is shown belxperiment@colData)
SummarizedExperiment::colData(experiment)
colData(experiment)
rowData(experiment)
rowData(experiment) %>% as.tibble()
rowData(experiment) %>% as.tibble() %>%
arrange("sample_id")
rowData(experiment) %>% as.tibble() %>%
relocate(sample_id)
print(n=50)
rowData(experiment) %>% as.tibble() %>%
relocate(sample_id) %>% print(n=50)
rowData(experiment) %>% as.tibble() %>%
relocate(sample_id, condition) %>% print(n=50)
rowData(experiment) %>% as.tibble() %>%
relocate(sample_id, condition, sample_type) %>% print(n=50)
rowData(experiment) %>% as.tibble() %>%
relocate(sample_id, condition, sample_type, time.point, biol.batch)
rowData(experiment) %>% as.tibble() %>%
select(sample_id, condition, sample_type, time.point, biol.batch)
rowData(experiment) %>% as.tibble() %>%
select(sample_id, condition, sample_type, time.point, biol.batch) %>% left_join(assay(experiment), by = "sample_id")
SummarizedExperiment::assay(experiment) %>%
as_tibble()
SummarizedExperiment::assay(experiment) %>%
as_tibble() %>% bind_cols(sample_id = rownames(.))
rowData(experiment)
colData(experiment)
rowData(experiment)
SummarizedExperiment::assay(experiment) %>%
as_tibble() %>% bind_cols(rowData(experiment) %>% as_tibble() %>% select(sample_id))
SummarizedExperiment::assay(experiment) %>%
as_tibble() %>% bind_cols(rowData(experiment) %>% as_tibble() %>% select(sample_id)) %>% colnames()
dataexperiment <- SummarizedExperiment::assay(experiment) %>%
as_tibble() %>% bind_cols(rowData(experiment) %>% as_tibble() %>% select(sample_id)) %>% colnames()
rowData(experiment) %>% as.tibble() %>%
select(sample_id, condition, sample_type, time.point, biol.batch) %>% left_join(dataexperiment, by = "sample_id")
dataexperiment <- SummarizedExperiment::assay(experiment) %>%
as_tibble() %>% bind_cols(rowData(experiment) %>% as_tibble() %>% select(sample_id))
rowData(experiment) %>% as.tibble() %>%
select(sample_id, condition, sample_type, time.point, biol.batch) %>% left_join(dataexperiment, by = "sample_id")
SummarizedExperiment::assay(experiment) %>% rownames()
SummarizedExperiment::assay(experiment) %>% mutate(sample_id = rownames())
SummarizedExperiment::assay(experiment) %>% mutate(sample_id = rownames(.))
rowData(experiment) %>% as.tibble() %>%
select(sample_id, condition, sample_type, time.point, biol.batch) %>% left_join(assay(experiment), by = rownames(.))
rowData(experiment) %>%
select(sample_id, condition, sample_type, time.point, biol.batch) %>% left_join(assay(experiment), by = rownames(.))
rowData(experiment) %>%
as.tibble() %>%
select(sample_id, condition, sample_type, time.point, biol.batch) %>%
left_join(
SummarizedExperiment::assay(experiment) %>%
mutate(
sample_id = rownames(.)), by = "sample_id"
)
metabData <- rowData(experiment) %>%
as.tibble() %>%
select(sample_id, condition, sample_type, time.point, biol.batch) %>%
left_join(
SummarizedExperiment::assay(experiment) %>%
mutate(
sample_id = rownames(.)), by = "sample_id"
)
styler:::style_active_file()
View(metabData)
sampledata <- data(st000336)
load("data/st000336.rda")
View(st000336)
BiocManager::install("metabolomicsWorkbenchR")
install.packages("metabolomicsWorkbenchR")
# BiocManager::install("metabolomicsWorkbenchR")
library(metabolomicsWorkbenchR)
S = do_query('study','study_id','ST000336','summary')
S
t(S)
names(metabolomicsWorkbenchR::context)
context_inputs('study')
context_outputs('study')
DE = do_query('study','analysis_id','ST000336','DatasetExperiment')
context_outputs('study')
context_outputs('analysis_id')
context_inputs('study')
context_outputs('study')
do_query(context = "study", input_item = "ignored", input_value = "ignored", output_item = "DatasetExperiment")
do_query(
context = 'study',
input_item = 'ignored',
input_value = 'ignored',
output_item = 'untarg_studies'
)
US= do_query(
context = 'study',
input_item = 'ignored',
input_value = 'ignored',
output_item = 'untarg_studies'
)
t(S)
context_outputs('study')
S = do_query('study','study_id','ST000336','analysis')
S
t(S)
context_outputs('study')
do_query(context = "study", input_item = "study_id", input_value = "ST000336", output_item = "SummarizedExperiment")
Experimetn1 <- do_query(context = "study", input_item = "study_id", input_value = "ST000336", output_item = "SummarizedExperiment")
View(Experimetn1)
Experimetn1[["AN004436"]]
print(t(do_query(context = "study", input_item = "study_id", input_value = "ST000336", output_item = "analysis")))
View(st000336)
st000336
experimentData(st000336)
View(st000336)
st000336@assayData[["exprs"]]
st000336@assayData[["exprs"]]
getOption("max.print")
options(max.print = 5000)
st000336@assayData[["exprs"]]
Experimetn1[["AN004436"]]@assays@data@listData[[1]]
Experimetn1[["AN004437"]]@assays@data@listData[[1]]
st000336@assayData[["exprs"]]
print(t(do_query(context = "study", input_item = "study_id", input_value = "ST000336", output_item = "analysis")))
DE <- do_query('study','analysis_id','AN004436','DatasetExperiment')
DE <- do_query('study','analysis_id','AN004436','DatasetExperiment')
DE
SE <- do_query(context = "study", input_item = "analysis_id", input_value = "AN004436", output_item = "SummarizedExperiment")
SEDE <- as.DatasetExperiment(SE)
View(SEDE)
View(DE)
colData(DE)
DE <- do_query(context = "study", input_item = "analysis_id", input_value = "AN004436", output_item = "DatasetExperiment")
colData(DE)
rowData(DE)
View(rowData(DE))
rowData(DE)@rownames
rowData(DE)@listData[["Diagnosis"]]
rowData(DE)@listData[["steroid_status"]]
assay(DE)
devtools::install_github(repo="krumsieklab/maplet@v1.2.1", subdir="maplet")
library(maplet)
library(tidyverse)
E <-
mt_load_metabolomics_workbench(
study_id = "ST000336",
analysis_id = "AN004436"
) %>%
mt_anno_rename(anno_type = "features", old_col_names = "Metabolite", new_col_names = "name") %>%
mt_clean_validate_se() %>%
# # log assay dimensions and number of columns for both metabolite and clincial annotations
mt_reporting_data() %>%
# start timing
mt_reporting_tic() %>%
{.}
View(DE)
E <-
mt_load_metabolomics_workbench(
study_id = "ST000336",
analysis_id = "AN004436"
) %>%
mt_anno_rename(anno_type = "features", old_col_names = "Metabolite", new_col_names = "name") %>%
# mt_clean_validate_se() %>%
# # log assay dimensions and number of columns for both metabolite and clincial annotations
mt_reporting_data() %>%
# start timing
mt_reporting_tic() %>%
{.}
View(E)
E <-
mt_load_metabolomics_workbench(
study_id = "ST000336",
analysis_id = "AN004436"
) %>%
mt_anno_rename(anno_type = "features", old_col_names = "Metabolite", new_col_names = "name") %>%
# mt_clean_validate_se() %>%
# # log assay dimensions and number of columns for both metabolite and clincial annotations
mt_reporting_data() %>%
# start timing
mt_reporting_tic() %>%
{.}
rownames(D)
colnames(D)
rownames(E)
library(targets)
tar_visnetwork()
tar_make()
tar_make()
library(structToolbox)
tar_make()
tar_edit()
tar_make()
source("C:/Users/eduar/Desktop/TFM/Work/R/filter.R")
source("C:/Users/eduar/Desktop/TFM/Work/R/filter.R")
tar_make()
source("C:/Users/eduar/Desktop/TFM/Work/R/filter.R")
tar_make()
source("C:/Users/eduar/Desktop/TFM/Work/R/filter.R")
tar_make()
tar_make()
tar_load(blank_filtered)
View(blank_filtered)
assay(blank_filtered)
library(SummarizedExperiment)
assay(blank_filtered)
View(blank_filtered)
colData(blank_filter())
colData(blank_filtered)
rowData(blank_filtered)
tar_make()
tar_load(blank_filtered)
assay(blank_filtered)
View(blank_filtered)
rowData(blank_filtered)
tar_make()
# Signal drift and batch correction
batch_correction <- function(dataset_exp, order_col, batch_col, qc_col, qc_label) {
M <- sb_corr(
order_col = order_col,
batch_col = batch_col,
qc_col = qc_col,
qc_label = qc_label,
# spar_lim = c(0.6,0.8)
)
M <- model_apply(M, dataset_exp)
return(predicted(M))
### THIS IS FOR PLOTING THE SIGNAL DRIFT AND BATCH CORRECTION #### \
# BUT WE COULD USE A PCA PLOT INSTEAD
# C = feature_profile(
#   run_order=order_col,
#   qc_label=qc_label,
#   qc_column=qc_col,
#   colour_by='batch_qc',
#   feature_to_plot=,
#   plot_sd=FALSE
# )
}
batch_correction(blank_filtered,
order_col = "order",
batch_col = "biol.batch",
qc_col = "sample_type",
qc_label = 'QC')
assay(batch_correction(blank_filtered,
+ order_col = "order",
sb_corrected <- batch_correction(blank_filtered,
+ order_col = "order",
# DE
# A <- rsd_filter(rsd_threshold = 20, qc_label= "QC", factor_name = "condition")
# A <- model_apply(A,DE)
#
# filtered <- predicted(A)
# filtered
sb_corrected<- batch_correction(blank_filtered,
order_col = "order",
batch_col = "biol.batch",
qc_col = "sample_type",
qc_label = 'QC')
View(sb_corrected)
assay(sb_corrected)
knitr::opts_chunk$set(collapse = TRUE, comment = "#>")
install.packages(c("biglm", "dplyr", "ggplot2", "readr", "targets", "tidyr"))
source("C:/Users/eduar/Desktop/TFM/Work/R/filter.R")
tar_read()
tar_read(blank_filtered)
knitr::opts_chunk$set(collapse = TRUE, comment = "#>")
library(targets)
library(targets)
tar_unscript()
dataMatrixPath <- "data/dataMatrix.csv"
sampleMetadataPath <- "data/sampleMetadata.csv"
variableMetadataPath <- "data/variableMetadata.csv"
library(targets)
library(tarchetypes)
dataMatrixPath <- "data/dataMatrix.csv"
sampleMetadataPath <- "data/sampleMetadata.csv"
variableMetadataPath <- "data/variableMetadata.csv"
knitr::opts_chunk$set(collapse = TRUE, comment = "#>")
library(targets)
library(tarchetypes)
tar_unscript()
dataMatrixPath <- "data/dataMatrix.csv"
sampleMetadataPath <- "data/sampleMetadata.csv"
variableMetadataPath <- "data/variableMetadata.csv"
View(fit)
View(experiment)
library(SummarizedExperiment)
assay(experiment$data)
tar_make()
library(tarchetypes)
knitr::opts_chunk$set(collapse = TRUE, comment = "#>")
library(targets)
library(tarchetypes)
knitr::opts_chunk$set(collapse = TRUE, comment = "#>")
library(targets)
tar_make()
targets::tar_meta(fields = warnings, complete_only = TRUE)
tar_make()
tar_load(blank_filtered)
View(blank_filtered)
blank_filtered@assays@data@listData[[1]]
#| label: load
#| message: false
targets::tar_load(na_experiment)
targets::tar_load(filtered_experiment)
source("./R/Plots.R")
#| label: results-stats
missing_values_plot(na_experiment)
missing_values_plot(filtered_experiment)
#| label: missing-values
missing_values_plot(na_experiment)
missing_values_plot(filtered_experiment)
sample_missing_values_plot(na_experiment)
#| label: load
#| message: false
targets::tar_load(na_experiment)
targets::tar_load(filtered_experiment)
source("./R/Plots.R")
#| label: missing-values
missing_values_plot(na_experiment)
missing_values_plot(filtered_experiment)
sample_missing_values_plot(na_experiment)
#| label: load
#| message: false
targets::tar_load(na_experiment)
targets::tar_load(filtered_experiment)
source("./R/Plots.R")
#| label: missing-values
missing_values_plot(na_experiment)
missing_values_plot(filtered_experiment)
sample_missing_values_plot(na_experiment)
#| label: load
#| message: false
targets::tar_load(na_experiment)
targets::tar_load(experiment)
targets::tar_load(filtered_experiment)
source("./R/Plots.R")
sample_missing_values_plot(experiment)
missing_values_plot(experiment)
library(structToolbox)
sample_missing_values_plot(experiment)
sample_missing_values_plot(na_experiment)
source("C:/Users/eduar/Desktop/TFM/Work/R/Plots.R")
sample_missing_values_plot(na_experiment)
tar_make()
tar_make()
tar_load(batch_corrected)
assay(batch_corrected)
tar_load(knn_imputed)
assay(knn_imputed)
assay(batch_corrected)
rowData(knn_imputed)
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
targets::tar_meta(fields = warnings, complete_only = TRUE)
targets::tar_meta(fields = warnings, complete_only = TRUE)
tar_make()
tar_load(knn_imputed)
assay(knn_imputed)
rowData(knn_imputed)
tar_make()
targets::tar_meta(fields = warnings, complete_only = TRUE)
tar_load(batch_corrected)
assay(batch_corrected)
tar_make()
tar_load(batch_corrected)
assay(batch_corrected)
tar_make()
tar_make()
library(pmp)
tar_load(filtered_experiment)
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_load(batch_corrected)
assay(batch_corrected)
