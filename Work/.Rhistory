library(SummarizedExperiment)
library(structToolbox)
library(pmp)
library(ropls)
library(BiocFileCache)
# CRAN libraries
library(ggplot2)
library(gridExtra)
library(cowplot)
library(openxlsx)
library(VIM)
library(dplyr)
})
# use the BiocFileCache
bfc <- BiocFileCache(ask = FALSE)
# path to zip
zipfile = "https://raw.github.com/STATegraData/STATegraData/master/Script_STATegra_Metabolomics.zip"
## retrieve from BiocFileCache
path = bfcrpath(bfc,zipfile)
temp = bfccache(bfc)
## ... or download to temp location
# path = tempfile()
# temp = tempdir()
# download.file(zipfile,path)
# unzip
unzip(zipfile=path, files = "LC_MS_raw_data.xlsx", exdir=temp)
# read samples
data <- as.data.frame(read.xlsx(file.path(temp,"LC_MS_raw_data.xlsx"),sheet = 'Data'))
# Save data as a csv file
# write.csv(data, file = "data.csv")
##### PREPARING DATA FOR EXPERIMENT ######
# Create SampleMetadata dataframe
SM <- data[,1:7]
SM$sample_id = SM$label
# Define QC and blank samples
blanks=c(1,2,33,34,65,66)
QCs=c(3,4,11,18,25,32,35,36,43,50,57,64)
SM$sample_type = "Sample"
SM$sample_type[blanks] = "Blank"
SM$sample_type[QCs] = "QC"
# Create variableMetadata object
VM = data.frame('annotation'=colnames(data)[8:ncol(data)])
# Create the raw data matrix
X = data[,8:ncol(data)]
X$sample_id = SM$sample_id
# Save data as csv files
write.csv(X, file = "data/dataMatrix.csv", row.names = FALSE)
write.csv(SM, file = "data/sampleMetadata.csv", row.names = FALSE)
write.csv(VM, file = "data/variableMetadata.csv", row.names = FALSE)
# Create the experiment
DE <- createExperiment(X, SM, VM, "LCMS Raw test", "Description Test")
# Source all files in the R/ directory
file.sources <- list.files("R", pattern = "*.R", full.names=TRUE)
invisible(sapply(file.sources, source, .GlobalEnv))
# Create the experiment
DE <- createExperiment(X, SM, VM, "LCMS Raw test", "Description Test")
knitr::opts_chunk$set(echo = TRUE)
# Source all files in the R/MAI directory
file.sources <- list.files("R/MAI", pattern = "*.R", full.names=TRUE)
invisible(sapply(file.sources, source, .GlobalEnv))
# Source all files in the R/MAI directory
file.sources <- list.files("R/MAI", pattern = "*.R", full.names=TRUE)
invisible(sapply(file.sources, source, .GlobalEnv))
DE_imp <- impute_MAI(DE, MCAR = "random_forest", MNAR = "PPCA", ncores = 1, ntree = 1000, proximity = FALSE)
source("C:/Users/eduar/Desktop/TFM/Work/R/MAI/MAI.R")
source("C:/Users/eduar/Desktop/TFM/Work/R/MAI/utils.R")
DE_imp <- impute_MAI(DE, MCAR = "random_forest", MNAR = "PPCA", ncores = 1, ntree = 1000, proximity = FALSE)
library(parallel)
library(pcaMethods)
DE_imp <- impute_MAI(DE, MCAR = "random_forest", MNAR = "PPCA", ncores = 1, ntree = 1000, proximity = FALSE)
assay(DE)
DE_imp <- impute_MAI(DE, MCAR = "random_forest", MNAR = "PPCA")
filter_data <- filter_MV(DE, threshold = 0.5)
DE_imp <- impute_MAI(filter_data, MCAR = "random_forest", MNAR = "PPCA")
filter_data <- filter_MV(DE, threshold = 0.8)
DE_imp <- impute_MAI(filter_data, MCAR = "random_forest", MNAR = "PPCA")
source("C:/Users/eduar/Desktop/TFM/Work/R/MAI/MAI.R")
source("C:/Users/eduar/Desktop/TFM/Work/R/MAI/utils.R")
DE_imp <- impute_MAI(filter_data, MCAR = "random_forest", MNAR = "PPCA")
DE
assay(DE)
source("C:/Users/eduar/Desktop/TFM/Work/R/MAI/utils.R")
DE_imp <- impute_MAI(filter_data, MCAR = "random_forest", MNAR = "PPCA")
MAI(assay(filter_data), "PPCA", "PPCA")
suppressPackageStartupMessages({
# Bioconductor packages
library(SummarizedExperiment)
library(structToolbox)
library(pmp)
library(ropls)
library(BiocFileCache)
# CRAN libraries
library(ggplot2)
library(gridExtra)
library(cowplot)
library(openxlsx)
library(VIM)
library(dplyr)
})
# Source all files in the R/ directory
file.sources <- list.files("R", pattern = "*.R", full.names=TRUE)
invisible(sapply(file.sources, source, .GlobalEnv))
# use the BiocFileCache
bfc <- BiocFileCache(ask = FALSE)
# path to zip
zipfile = "https://raw.github.com/STATegraData/STATegraData/master/Script_STATegra_Metabolomics.zip"
## retrieve from BiocFileCache
path = bfcrpath(bfc,zipfile)
temp = bfccache(bfc)
## ... or download to temp location
# path = tempfile()
# temp = tempdir()
# download.file(zipfile,path)
# unzip
unzip(zipfile=path, files = "LC_MS_raw_data.xlsx", exdir=temp)
# read samples
data <- as.data.frame(read.xlsx(file.path(temp,"LC_MS_raw_data.xlsx"),sheet = 'Data'))
# Save data as a csv file
# write.csv(data, file = "data.csv")
##### PREPARING DATA FOR EXPERIMENT ######
# Create SampleMetadata dataframe
SM <- data[,1:7]
SM$sample_id = SM$label
# Define QC and blank samples
blanks=c(1,2,33,34,65,66)
QCs=c(3,4,11,18,25,32,35,36,43,50,57,64)
SM$sample_type = "Sample"
SM$sample_type[blanks] = "Blank"
SM$sample_type[QCs] = "QC"
# Create variableMetadata object
VM = data.frame('annotation'=colnames(data)[8:ncol(data)])
# Create the raw data matrix
X = data[,8:ncol(data)]
X$sample_id = SM$sample_id
# Save data as csv files
write.csv(X, file = "data/dataMatrix.csv", row.names = FALSE)
write.csv(SM, file = "data/sampleMetadata.csv", row.names = FALSE)
write.csv(VM, file = "data/variableMetadata.csv", row.names = FALSE)
# Create the experiment
DE <- createExperiment(X, SM, VM, "LCMS Raw test", "Description Test")
DE
# Filter NA
filtered_experiment <- filter_MV(DE)
filtered_experiment
mainImputed_experiment <- impute_MAI(filtered_experiment, "random_forest", "PPCA")
file.sources <- list.files("R/MAI", pattern = "*.R", full.names=TRUE)
invisible(sapply(file.sources, source, .GlobalEnv))
View(MAI)
mainImputed_experiment <- impute_MAI(filtered_experiment, "random_forest", "PPCA")
library(parallel)
library(pcaMethods)
mainImputed_experiment <- impute_MAI(filtered_experiment, "random_forest", "PPCA")
source("C:/Users/eduar/Desktop/TFM/Work/R/MAI/utils.R")
source("C:/Users/eduar/Desktop/TFM/Work/R/MAI/MAI.R")
mainImputed_experiment <- impute_MAI(filtered_experiment, "random_forest", "PPCA")
library(caret)
source("C:/Users/eduar/Desktop/TFM/Work/R/MAI/MAI.R")
mainImputed_experiment <- impute_MAI(filtered_experiment, "random_forest", "PPCA")
library(missForest)
mainImputed_experiment <- impute_MAI(filtered_experiment, "random_forest", "PPCA")
mainImputed_experiment <- impute_MAI(DE, "random_forest", "PPCA")
suppressPackageStartupMessages({
# Bioconductor packages
library(SummarizedExperiment)
library(structToolbox)
library(pmp)
library(ropls)
library(BiocFileCache)
# CRAN libraries
library(ggplot2)
library(gridExtra)
library(cowplot)
library(openxlsx)
library(VIM)
library(dplyr)
library(caret)
library(missForest)
library(pcaMethods)
library(parallel)
})
# Source all files in the R/ directory
file.sources <- list.files("R", pattern = "*.R", full.names=TRUE)
invisible(sapply(file.sources, source, .GlobalEnv))
file.sources <- list.files("R/MAI", pattern = "*.R", full.names=TRUE)
file.sources
file.sources <- list.files("R/MAI", pattern = "*.R", full.names=TRUE)
file.sources
invisible(sapply(file.sources, source, .GlobalEnv))
# use the BiocFileCache
bfc <- BiocFileCache(ask = FALSE)
# path to zip
zipfile = "https://raw.github.com/STATegraData/STATegraData/master/Script_STATegra_Metabolomics.zip"
## retrieve from BiocFileCache
path = bfcrpath(bfc,zipfile)
temp = bfccache(bfc)
## ... or download to temp location
# path = tempfile()
# temp = tempdir()
# download.file(zipfile,path)
# unzip
unzip(zipfile=path, files = "LC_MS_raw_data.xlsx", exdir=temp)
# read samples
data <- as.data.frame(read.xlsx(file.path(temp,"LC_MS_raw_data.xlsx"),sheet = 'Data'))
# Save data as a csv file
# write.csv(data, file = "data.csv")
##### PREPARING DATA FOR EXPERIMENT ######
# Create SampleMetadata dataframe
SM <- data[,1:7]
SM$sample_id = SM$label
# Define QC and blank samples
blanks=c(1,2,33,34,65,66)
QCs=c(3,4,11,18,25,32,35,36,43,50,57,64)
SM$sample_type = "Sample"
SM$sample_type[blanks] = "Blank"
SM$sample_type[QCs] = "QC"
# Create variableMetadata object
VM = data.frame('annotation'=colnames(data)[8:ncol(data)])
# Create the raw data matrix
X = data[,8:ncol(data)]
X$sample_id = SM$sample_id
# Save data as csv files
write.csv(X, file = "data/dataMatrix.csv", row.names = FALSE)
write.csv(SM, file = "data/sampleMetadata.csv", row.names = FALSE)
write.csv(VM, file = "data/variableMetadata.csv", row.names = FALSE)
# Create the experiment
DE <- createExperiment(X, SM, VM, "LCMS Raw test", "Description Test")
DE
####### FILTERING AND IMPUTATION #######
# Filter NA
filtered_experiment <- filter_MV(DE)
filtered_experiment
mainImputed_experiment <- impute_MAI(DE, "random_forest", "PPCA")
mainImputed_experiment <- impute_MAI(filtered_experiment, "random_forest", "PPCA")
mainImputed_experiment <- impute_MAI(DE, "random_forest", "PPCA")
View(mainImputed_experiment)
mainImputed_experiment
assay(main)
assay(mainImputed_experiment)
imp <- as.data.frame(assay(mainImputed_experiment))
View(imp)
View(assay(DE))
source("C:/Users/eduar/Desktop/TFM/Work/R/MAI/utils.R")
mainImputed_experiment <- impute_MAI(DE, "random_forest", "PPCA")
source("C:/Users/eduar/Desktop/TFM/Work/R/imputation.R")
source("C:/Users/eduar/Desktop/TFM/Work/R/MAI/MAI.R")
source("C:/Users/eduar/Desktop/TFM/Work/R/MAI/utils.R")
source("C:/Users/eduar/Desktop/TFM/Work/R/MAI/utils.R")
source("C:/Users/eduar/Desktop/TFM/Work/R/MAI/MAI.R")
source("C:/Users/eduar/Desktop/TFM/Work/R/imputation.R")
mainImputed_experiment <- impute_MAI(DE, "random_forest", "PPCA")
source("C:/Users/eduar/Desktop/TFM/Work/R/imputation.R")
mainImputed_experiment <- impute_MAI(DE, "random_forest", "PPCA")
View(assay(mainImputed_experiment))
QRImputed_experiment <- impute_QRILC(filtered_experiment)
RFImputed_experiment <- impute_RF(filtered_experiment)
plot_density <- function(original_data, imputed_data) {
for (col in names(original_data)) {
original_density <- ggplot(data = original_data, aes(x = original_data[[col]])) +
geom_density(fill = "blue", alpha = 0.5) +
labs(title = paste("Density Plot of", col, "(Original Data)"))
imputed_density <- ggplot(data = imputed_data, aes(x = imputed_data[[col]])) +
geom_density(fill = "red", alpha = 0.5) +
labs(title = paste("Density Plot of", col, "(Imputed Data)"))
print(original_density)
print(imputed_density)
}
}
plot_histograms(imp, as.data.frame(assay(mainImputed_experiment)))
plot_density(imp, as.data.frame(assay(mainImputed_experiment)))
plot_density(imp$N_methyl_L_histidine, as.data.frame(assay(mainImputed_experiment))$N_methyl_L_histidine)
plot_density(imp$N_methyl_L_histidine, as.data.frame(assay(mainImputed_experiment))$N_methyl_L_histidine)
plot_histograms <- function(original_data, imputed_data) {
for (col in names(original_data)) {
original_hist <- ggplot(data = original_data, aes(x = original_data[[col]])) +
geom_histogram(binwidth = 1, fill = "blue", alpha = 0.5) +
labs(title = paste("Histogram of", col, "(Original Data)"))
imputed_hist <- ggplot(data = imputed_data, aes(x = imputed_data[[col]])) +
geom_histogram(binwidth = 1, fill = "red", alpha = 0.5) +
labs(title = paste("Histogram of", col, "(Imputed Data)"))
print(original_hist)
print(imputed_hist)
}
}
plot_histograms(imp$N_methyl_L_histidine, as.data.frame(assay(mainImputed_experiment))$N_methyl_L_histidine)
mainImputed_experiment <- impute_MAI(DE, "random_forest", "PPCA")
new <- as.data.frame(assay(mainImputed_experiment))
plot_histograms(imp, new)
warnings()
plot_histograms(imp$N_methyl_L_histidine, new$N_methyl_L_histidine)
plot_histograms <- function(original_data, imputed_data) {
for (col in names(original_data)) {
original_hist <- ggplot(data = NULL, aes(x = original_data[[col]])) +
geom_histogram(binwidth = 1, fill = "blue", alpha = 0.5) +
labs(title = paste("Histogram of", col, "(Original Data)"))
imputed_hist <- ggplot(data = NULL, aes(x = imputed_data[[col]])) +
geom_histogram(binwidth = 1, fill = "red", alpha = 0.5) +
labs(title = paste("Histogram of", col, "(Imputed Data)"))
print(original_hist)
print(imputed_hist)
}
}
plot_histograms(imp$N_methyl_L_histidine, new$N_methyl_L_histidine)
hist(imp$N_methyl_L_histidine)
plot_histograms_single <- function(original_var, imputed_var) {
original_hist <- ggplot(data = NULL, aes(x = original_var)) +
geom_histogram(binwidth = 1, fill = "blue", alpha = 0.5) +
labs(title = "Histogram Comparison") +
geom_histogram(data = NULL, aes(x = imputed_var), binwidth = 1, fill = "red", alpha = 0.5) +
labs(title = "Histogram Comparison") +
scale_fill_manual(name = "Data", values = c("blue", "red"), labels = c("Original", "Imputed")) +
theme_minimal()
print(original_hist)
}
plot_histograms_single(imp$N_methyl_L_histidine, new$N_methyl_L_histidine)
# Function to plot density plots for one variable
plot_density_single <- function(original_var, imputed_var) {
original_density <- ggplot(data = NULL, aes(x = original_var)) +
geom_density(fill = "blue", alpha = 0.5) +
labs(title = "Density Plot Comparison") +
geom_density(data = NULL, aes(x = imputed_var), fill = "red", alpha = 0.5) +
labs(title = "Density Plot Comparison") +
scale_fill_manual(name = "Data", values = c("blue", "red"), labels = c("Original", "Imputed")) +
theme_minimal()
print(original_density)
}
# Call the function to plot density plots for one variable
plot_density_single(new$N_methyl_L_histidine, imp$N_methyl_L_histidine)
# Function to plot density plots for one variable with a legend
plot_density_single_with_legend <- function(original_var, imputed_var) {
original_density <- ggplot(data = NULL, aes(x = original_var, fill = "Original")) +
geom_density(alpha = 0.5) +
labs(title = "Density Plot Comparison") +
geom_density(data = NULL, aes(x = imputed_var, fill = "Imputed"), alpha = 0.5) +
labs(title = "Density Plot Comparison") +
scale_fill_manual(name = "Data", values = c("Original" = "blue", "Imputed" = "red")) +
theme_minimal()
print(original_density)
}
# Call the function to plot density plots for one variable with a legend
plot_density_single_with_legend(new$N_methyl_L_histidine, imp$N_methyl_L_histidine)
source("C:/Users/eduar/Desktop/TFM/Work/R/Plots.R")
plot_density_single_with_legend(new$N_methyl_L_histidine, imp$N_methyl_L_histidine)
plot_density_single_with_legend <- function(original_var, imputed_var, third_var) {
original_density <- ggplot(data = NULL, aes(x = original_var, fill = "Original")) +
geom_density(alpha = 0.5) +
labs(title = "Density Plot Comparison") +
geom_density(data = NULL, aes(x = imputed_var, fill = "Imputed"), alpha = 0.5) +
labs(title = "Density Plot Comparison") +
geom_density(data = NULL, aes(x = third_var, fill = "Third"), alpha = 0.5) +
labs(title = "Density Plot Comparison") +
scale_fill_manual(name = "Data", values = c("Original" = "blue", "Imputed" = "red", "Third" = "green")) +
theme_minimal()
print(original_density)
}
orig <- DE$data
View(data)
View(orig)
plot_density_single_with_legend(new$N_methyl_L_histidine, imp$N_methyl_L_histidine, orig$N_methyl_L_histidine)
renv::status()
?renv::status()
renv::restore()
library(targets)
tar_visnetwork()
suppressPackageStartupMessages({
# Bioconductor packages
library(SummarizedExperiment)
library(structToolbox)
library(pmp)
library(ropls)
library(BiocFileCache)
# CRAN libraries
library(ggplot2)
library(gridExtra)
library(cowplot)
library(openxlsx)
library(VIM)
library(dplyr)
library(caret)
library(missForest)
library(pcaMethods)
library(parallel)
})
library(targets)
renv::restore()
library(targets)
tar_visnetwork()
renv::status()
VIM::
VIM::aggr()
tar_renv(
extras = c(
"caret"
)
)
renv::restore()
install.packages("caret")
MASS::abbey
suppressPackageStartupMessages({
# Bioconductor packages
library(SummarizedExperiment)
library(structToolbox)
library(pmp)
library(ropls)
library(BiocFileCache)
# CRAN libraries
library(ggplot2)
library(gridExtra)
library(cowplot)
library(openxlsx)
library(VIM)
library(dplyr)
library(caret)
library(missForest)
library(pcaMethods)
library(parallel)
})
# Source all files in the R/ directory
file.sources <- list.files("R", pattern = "*.R", full.names=TRUE)
invisible(sapply(file.sources, source, .GlobalEnv))
# file.sources <- list.files("R/MAI", pattern = "*.R", full.names=TRUE)
# invisible(sapply(file.sources, source, .GlobalEnv))
# use the BiocFileCache
bfc <- BiocFileCache(ask = FALSE)
# path to zip
zipfile = "https://raw.github.com/STATegraData/STATegraData/master/Script_STATegra_Metabolomics.zip"
## retrieve from BiocFileCache
path = bfcrpath(bfc,zipfile)
temp = bfccache(bfc)
## ... or download to temp location
# path = tempfile()
# temp = tempdir()
# download.file(zipfile,path)
# unzip
unzip(zipfile=path, files = "LC_MS_raw_data.xlsx", exdir=temp)
# read samples
data <- as.data.frame(read.xlsx(file.path(temp,"LC_MS_raw_data.xlsx"),sheet = 'Data'))
# Save data as a csv file
# write.csv(data, file = "data.csv")
##### PREPARING DATA FOR EXPERIMENT ######
# Create SampleMetadata dataframe
SM <- data[,1:7]
SM$sample_id = SM$label
# Define QC and blank samples
blanks=c(1,2,33,34,65,66)
QCs=c(3,4,11,18,25,32,35,36,43,50,57,64)
SM$sample_type = "Sample"
SM$sample_type[blanks] = "Blank"
SM$sample_type[QCs] = "QC"
# Create variableMetadata object
VM = data.frame('annotation'=colnames(data)[8:ncol(data)])
# Create the raw data matrix
X = data[,8:ncol(data)]
X$sample_id = SM$sample_id
# Save data as csv files
write.csv(X, file = "data/dataMatrix.csv", row.names = FALSE)
write.csv(SM, file = "data/sampleMetadata.csv", row.names = FALSE)
write.csv(VM, file = "data/variableMetadata.csv", row.names = FALSE)
# Create the experiment
DE <- createExperiment(X, SM, VM, "LCMS Raw test", "Description Test")
DE
####### FILTERING AND IMPUTATION #######
# Filter NA
filtered_experiment <- filter_MV(DE)
library(VIM)
# Filter NA
filtered_experiment <- filter_MV(DE)
par()
# Filter NA
filtered_experiment <- filter_MV(DE)
filtered_experiment
impute_median(filtered_experiment)
test<-impute_median(filtered_experiment)
test
test$data
tar_visnetwork()
renv::status
renv::status()
renv::snapshot()
tar_make()
library(crew)
tar_make()
tar_make()
getwd()
tar_make()
tar_make()
tar_make()
source("~/Desktop/TFM/Work/R/imputation.R")
impute_mean(filtered_experiment)
impute_mean(filtered_experiment)
imputed_data
debugSource("~/Desktop/TFM/Work/R/imputation.R")
impute_mean(filtered_experiment)
tar_make()
install.packages("quatro")
quatro
install.packages("quatro")
install.packages("tarchetypes")
tar_visnetwork()
renv::status()
renv::status()
renv::snapshot()
tar_active()
tar_make()
tar_visnetwork()
tar_visnetwork()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_visnetwork()
