mSet<-PreparePrenormData(mSet);
mSet<-Normalization(mSet, "NULL", "LogNorm", "MeanCenter", "S10T0", ratio=FALSE, ratioNum=20);
mSet<-PlotNormSummary(mSet, "norm_0_", format ="png", dpi=72, width=NA);
mSet<-PlotSampleNormSummary(mSet, "snorm_0_", format = "png", dpi=72, width=NA);
mSet<-PlotSampleNormSummary(mSet, "snorm_0_", format = "png", dpi=72, width=NA)
mSet
plot(mSet)
plot(mSet$norm_0_1)
plot(mSet$norm_0_)
plot(mSet$snorm_0_)
mSet[["dataSet"]]
mSet[["dataSet"]][["norm"]]
mSet<-Normalization(mSet, "NULL", "LogNorm", "MeanCenter", "1358BZU_0025_A1_11_0_Control", ratio=FALSE, ratioNum=20);
mSet<-PlotNormSummary(mSet, "norm_0_", format ="png", dpi=72, width=NA);
mSet<-PlotSampleNormSummary(mSet, "snorm_0_", format = "png", dpi=72, width=NA)
plot(mSet$snorm_0_)
mSet<-PreparePrenormData(mSet);
mSet<-Normalization(mSet, "NULL", "LogNorm", "MeanCenter", "1358BZU_0025_A1_11_0_Control", ratio=FALSE, ratioNum=20);
PlotNormSummary(mSet, "norm_0_", format ="png", dpi=72, width=NA);
PlotSampleNormSummary(mSet, "snorm_0_", format = "png", dpi=72, width=NA)
mSet<-Normalization(mSet, "NULL", "LogNorm", "MeanCenter", "", ratio=FALSE, ratioNum=20);
mSet<-PlotNormSummary(mSet, "norm_0_", format ="png", dpi=72, width=NA);
mSet<-PlotSampleNormSummary(mSet, "snorm_0_", format = "png", dpi=72, width=NA)
mSet<-PlotSampleNormSummary(mSet, "snorm_0_", format = "svg", dpi=72, width=NA)
mSet<-PlotNormSummary(mSet, "norm_0_", format ="svg", dpi=72, width=NA);
mSet<-PlotNormSummary(mSet, "plots/norm_0_", format ="svg", dpi=72, width=NA);
rm(list = ls())
library(MetaboAnalystR)
mSet <- InitDataObjects("conc", "stat", FALSE);
mSet <- Read.TextData(mSet, "data/metaboData.csv")
mSet<-SanityCheckData(mSet);
mSet<-ReplaceMin(mSet);
mSet<-PreparePrenormData(mSet);
mSet<-Normalization(mSet, "NULL", "LogNorm", "MeanCenter", "", ratio=FALSE, ratioNum=20);
mSet<-PlotNormSummary(mSet, "plots/norm_0_", format ="svg", dpi=72, width=NA);
mSet<-PlotSampleNormSummary(mSet, "plots/snorm_0_", format = "svg", dpi=72, width=NA)
print(mSet$msgSet$read.msg)
setwd("./analysis")
setwd(dir = "./analysis")
setwd(dir = "./analysis")
dir.create("analysis")
getwd
dir.create("analysis")
dir.create("analysis", showWarnings = FALSE)
setwd("..")
getwd()
# Load a dataframe to metaboanalystR data object
# mSet <- InitDataObjects("conc", "stat", FALSE);
# mSet <- Read.TextData(mSet, "")
wd <- getwd()
getwd()
# Load a dataframe to metaboanalystR data object
# mSet <- InitDataObjects("conc", "stat", FALSE);
# mSet <- Read.TextData(mSet, "")
wd <- getwd()
out_dir <- "analysis"
if (!dir.exists(out_dir)) {
dir.create(out_dir)
}
setwd(file.path(wd, out_dir))
getwd()
mSet <- InitDataObjects("conc", "stat", FALSE);
mSet <- Read.TextData(mSet, "data/metaboData.csv")
mSet <- Read.TextData(mSet, filePath = file.path(wd, "data/metaboData.csv"))
mSet<-SanityCheckData(mSet);
# mSet<-ReplaceMin(mSet);
mSet <- RemoveMissingPercent(mSet, percent=0.5)
mSet <- InitDataObjects("conc", "stat", FALSE);
mSet <- Read.TextData(mSet, filePath = file.path(wd, "data/metaboData.csv"))
mSet<-SanityCheckData(mSet);
# mSet<-ReplaceMin(mSet);
mSet <- RemoveMissingPercent(mSet, percent=0.5) #Remove features containing a user-defined % cut-off of missing values
# mSet <- ImputeMissingVar(mSet, method="exclude") #Remove variables with missing values
mSet <- ImputeMissingVar(mSet, method="knn_smp") #Replace missing values with KNN imputed values
# Check if the sample size is too small, returns a 0 if the data passes the check
mSet<-IsSmallSmplSize(mSet)
mSet<-PreparePrenormData(mSet);
plot_dir <- "plots"
if (!dir.exists(plot_dir)) {
dir.create(plot_dir)
}
mSet<-PreparePrenormData(mSet);
mSet<-Normalization(mSet, "NULL", "LogNorm", "MeanCenter", "", ratio=FALSE, ratioNum=20);
mSet<-PlotNormSummary(mSet, file.path(plot_dir, "norm_0_"), format ="svg", dpi=72, width=NA);
mSet<-PlotSampleNormSummary(mSet, file.path(plot_dir, "snorm_0_"), format = "svg", dpi=72, width=NA)
library(targets)
library(structToolbox)
tar_load(experiment)
data_matrix <- SummarizedExperiment::assay(experiment)
sample_metadata <- SummarizedExperiment::as.data.frame(colData(experiment))
?colData
colData(experiment)
suppressPackageStartupMessages({
# Bioconductor packages
library(SummarizedExperiment)
library(structToolbox)
library(pmp)
library(ropls)
library(BiocFileCache)
# CRAN libraries
library(ggplot2)
library(gridExtra)
library(cowplot)
library(openxlsx)
library(VIM)
library(dplyr)
library(caret)
library(missForest)
library(pcaMethods)
library(parallel)
})
sample_metadata <- SummarizedExperiment::as.data.frame(colData(experiment))
?colData()
?colData
DataFrame::
DataFrame::as.data.frame
DataFrame::as.data.frame()
variable_metadata <- SummarizedExperiment::as.data.frame(rowData(experiment))
View(data_matrix)
View(sample_metadata)
View(variable_metadata)
sample_metadata <- SummarizedExperiment::as.data.frame(SummarizedExperiment::colData(experiment))
View(sample_metadata)
sample_metadata <- SummarizedExperiment::as.data.frame(SummarizedExperiment::rowData(experiment))
variable_metadata <- SummarizedExperiment::as.data.frame(SummarizedExperiment::colData(experiment))
View(variable_metadata)
View(sample_metadata)
metaboData <- sample_metadata
metaboData <- cbind(sample_metadata, data_matrix)
View(metaboData)
DE_to_metaboanalyst <- function(dataset_experiment, file_name = "data/metaboData.csv") {
# Extract the data matrix
data_matrix <- SummarizedExperiment::assay(dataset_experiment)
# Extract the sample metadata
sample_metadata <- SummarizedExperiment::as.data.frame(SummarizedExperiment::rowData(dataset_experiment))
# Extract the variable metadata
# variable_metadata <- SummarizedExperiment::as.data.frame(SummarizedExperiment::colData(dataset_experiment))
# Convert the data matrix to a data frame
# data_frame <- as.data.frame(data_matrix)
# Add the sample metadata to the data frame
data_frame <- cbind(sample_metadata, data_matrix)
# Add the variable metadata to the data frame
# data_frame <- cbind(variable_metadata, data_frame)
write.csv(data_frame, file = "data/metaboData.csv", row.names = FALSE)
return(data_frame)
}
DE_to_metaboanalyst(experiment, "data/metaboData.csv")
DE_to_metaboanalyst(experiment, "data/metaboData.csv")
# Load a dataframe to metaboanalystR data object
# mSet <- InitDataObjects("conc", "stat", FALSE);
# mSet <- Read.TextData(mSet, "")
wd <- getwd()
out_dir <- "analysis"
plot_dir <- "plots"
if (!dir.exists(out_dir)) {
dir.create(out_dir)
}
setwd(file.path(wd, out_dir))
if (!dir.exists(plot_dir)) {
dir.create(plot_dir)
}
mSet <- InitDataObjects("conc", "stat", FALSE);
library(MetaboAnalystR)
mSet <- InitDataObjects("conc", "stat", FALSE);
mSet <- Read.TextData(mSet, filePath = file.path(wd, "data/metaboData.csv"))
mSet<-SanityCheckData(mSet);
warnings()
View(mSet)
mSet[["dataSet"]][["meta.info"]]
mSet[["dataSet"]]
vignette(package="MetaboAnalystR")
browseVignettes("MetaboAnalystR")
devtools::install_github("xia-lab/MetaboAnalystR", build = TRUE, build_vignettes = TRUE, build_manual =T)
detach("package:MetaboAnalystR", unload = TRUE)
devtools::install_github("xia-lab/MetaboAnalystR", build = TRUE, build_vignettes = TRUE, build_manual =T)
detach("package:structToolbox", unload = TRUE)
devtools::install_github("xia-lab/MetaboAnalystR", build = TRUE, build_vignettes = TRUE, build_manual =T)
Sys.unsetenv("GITHUB_PAT")
devtools::install_github("xia-lab/MetaboAnalystR", build = TRUE, build_vignettes = TRUE, build_manual =T)
devtools::install_github("xia-lab/MetaboAnalystR", build = TRUE, build_vignettes = TRUE, build_manual =T)
getwd)
getwd()
library(MetaboAnalystR)
library(targets)
library(dplyr)
library(tidyverse)
# Load the experiment
tar_load("experiment")
getwd()
setwd("../")
getwd()
# Load the experiment
tar_load("experiment")
SummarizedExperiment::assay(experiment)
SummarizedExperiment::assay(experiment) %>%
as.tibble()
SummarizedExperiment::assay(experiment) %>%
as_tibble()
SummarizedExperiment::assay(experiment) %>%
as_tibble() %>%
# Create the metadata table
# Metadata table containing multiple factors and covariates
# This is a general table containing various descriptors for the data to be analyzed
#
# The sample IDs must be identical to the metabolomics data;
# The column after sample IDs should be the primary metadata of interest;
# The metadata can contain either categorical (with at least three replicates per group) or continuous values (covariates);
# Missing values are not allowed - you will be asked to manually "fix" the missing values if detected
# A screenshot of a metadata table is shown below.
SummarizedExperiment::colData(experiment) %>%
as_tibble()
library(SummarizedExperiment)
SummarizedExperiment::assay(experiment) %>%
as_tibble() %>%
# Create the metadata table
# Metadata table containing multiple factors and covariates
# This is a general table containing various descriptors for the data to be analyzed
#
# The sample IDs must be identical to the metabolomics data;
# The column after sample IDs should be the primary metadata of interest;
# The metadata can contain either categorical (with at least three replicates per group) or continuous values (covariates);
# Missing values are not allowed - you will be asked to manually "fix" the missing values if detected
# A screenshot of a metadata table is shown below.
colData(experiment) %>%
as_tibble()
library(structToolbox)
SummarizedExperiment::assay(experiment) %>%
as_tibble() %>%
# Create the metadata table
# Metadata table containing multiple factors and covariates
# This is a general table containing various descriptors for the data to be analyzed
#
# The sample IDs must be identical to the metabolomics data;
# The column after sample IDs should be the primary metadata of interest;
# The metadata can contain either categorical (with at least three replicates per group) or continuous values (covariates);
# Missing values are not allowed - you will be asked to manually "fix" the missing values if detected
# A screenshot of a metadata table is shown below.
colData(experiment) %>%
as_tibble()
SummarizedExperiment::assay(experiment) %>%
as_tibble() %>%
# Create the metadata table
# Metadata table containing multiple factors and covariates
# This is a general table containing various descriptors for the data to be analyzed
#
# The sample IDs must be identical to the metabolomics data;
# The column after sample IDs should be the primary metadata of interest;
# The metadata can contain either categorical (with at least three replicates per group) or continuous values (covariates);
# Missing values are not allowed - you will be asked to manually "fix" the missing values if detected
# A screenshot of a metadata table is shown below.
colData(experiment)
# Load the experiment
tar_load("experiment")
SummarizedExperiment::assay(experiment) %>%
as_tibble() %>%
# Create the metadata table
# Metadata table containing multiple factors and covariates
# This is a general table containing various descriptors for the data to be analyzed
#
# The sample IDs must be identical to the metabolomics data;
# The column after sample IDs should be the primary metadata of interest;
# The metadata can contain either categorical (with at least three replicates per group) or continuous values (covariates);
# Missing values are not allowed - you will be asked to manually "fix" the missing values if detected
# A screenshot of a metadata table is shown below.
colData(experiment)
suppressPackageStartupMessages({
# Bioconductor packages
library(SummarizedExperiment)
library(structToolbox)
library(pmp)
library(ropls)
library(BiocFileCache)
# CRAN libraries
library(ggplot2)
library(gridExtra)
library(cowplot)
library(openxlsx)
library(VIM)
library(dplyr)
library(caret)
library(missForest)
library(pcaMethods)
library(parallel)
})
SummarizedExperiment::assay(experiment) %>%
as_tibble() %>%
# Create the metadata table
# Metadata table containing multiple factors and covariates
# This is a general table containing various descriptors for the data to be analyzed
#
# The sample IDs must be identical to the metabolomics data;
# The column after sample IDs should be the primary metadata of interest;
# The metadata can contain either categorical (with at least three replicates per group) or continuous values (covariates);
# Missing values are not allowed - you will be asked to manually "fix" the missing values if detected
# A screenshot of a metadata table is shown below.
colData(experiment)
SummarizedExperiment::assay(experiment) %>%
as_tibble() %>%
# Create the metadata table
# Metadata table containing multiple factors and covariates
# This is a general table containing various descriptors for the data to be analyzed
#
# The sample IDs must be identical to the metabolomics data;
# The column after sample IDs should be the primary metadata of interest;
# The metadata can contain either categorical (with at least three replicates per group) or continuous values (covariates);
# Missing values are not allowed - you will be asked to manually "fix" the missing values if detected
# A screenshot of a metadata table is shown below.
SummarizedExperiment::colData(experiment)
View(experiment)
SummarizedExperiment::assay(experiment) %>%
as_tibble() %>%
# Create the metadata table
# Metadata table containing multiple factors and covariates
# This is a general table containing various descriptors for the data to be analyzed
#
# The sample IDs must be identical to the metabolomics data;
# The column after sample IDs should be the primary metadata of interest;
# The metadata can contain either categorical (with at least three replicates per group) or continuous values (covariates);
# Missing values are not allowed - you will be asked to manually "fix" the missing values if detected
# A screenshot of a metadata table is shown below.
SummarizedExperiment::colData(experiment@colData)
SummarizedExperiment::assay(experiment) %>%
as_tibble() %>%
# Create the metadata table
# Metadata table containing multiple factors and covariates
# This is a general table containing various descriptors for the data to be analyzed
#
# The sample IDs must be identical to the metabolomics data;
# The column after sample IDs should be the primary metadata of interest;
# The metadata can contain either categorical (with at least three replicates per group) or continuous values (covariates);
# Missing values are not allowed - you will be asked to manually "fix" the missing values if detected
# A screenshot of a metadata table is shown belxperiment@colData)
SummarizedExperiment::colData(experiment)
colData(experiment)
rowData(experiment)
rowData(experiment) %>% as.tibble()
rowData(experiment) %>% as.tibble() %>%
arrange("sample_id")
rowData(experiment) %>% as.tibble() %>%
relocate(sample_id)
print(n=50)
rowData(experiment) %>% as.tibble() %>%
relocate(sample_id) %>% print(n=50)
rowData(experiment) %>% as.tibble() %>%
relocate(sample_id, condition) %>% print(n=50)
rowData(experiment) %>% as.tibble() %>%
relocate(sample_id, condition, sample_type) %>% print(n=50)
rowData(experiment) %>% as.tibble() %>%
relocate(sample_id, condition, sample_type, time.point, biol.batch)
rowData(experiment) %>% as.tibble() %>%
select(sample_id, condition, sample_type, time.point, biol.batch)
rowData(experiment) %>% as.tibble() %>%
select(sample_id, condition, sample_type, time.point, biol.batch) %>% left_join(assay(experiment), by = "sample_id")
SummarizedExperiment::assay(experiment) %>%
as_tibble()
SummarizedExperiment::assay(experiment) %>%
as_tibble() %>% bind_cols(sample_id = rownames(.))
rowData(experiment)
colData(experiment)
rowData(experiment)
SummarizedExperiment::assay(experiment) %>%
as_tibble() %>% bind_cols(rowData(experiment) %>% as_tibble() %>% select(sample_id))
SummarizedExperiment::assay(experiment) %>%
as_tibble() %>% bind_cols(rowData(experiment) %>% as_tibble() %>% select(sample_id)) %>% colnames()
dataexperiment <- SummarizedExperiment::assay(experiment) %>%
as_tibble() %>% bind_cols(rowData(experiment) %>% as_tibble() %>% select(sample_id)) %>% colnames()
rowData(experiment) %>% as.tibble() %>%
select(sample_id, condition, sample_type, time.point, biol.batch) %>% left_join(dataexperiment, by = "sample_id")
dataexperiment <- SummarizedExperiment::assay(experiment) %>%
as_tibble() %>% bind_cols(rowData(experiment) %>% as_tibble() %>% select(sample_id))
rowData(experiment) %>% as.tibble() %>%
select(sample_id, condition, sample_type, time.point, biol.batch) %>% left_join(dataexperiment, by = "sample_id")
SummarizedExperiment::assay(experiment) %>% rownames()
SummarizedExperiment::assay(experiment) %>% mutate(sample_id = rownames())
SummarizedExperiment::assay(experiment) %>% mutate(sample_id = rownames(.))
rowData(experiment) %>% as.tibble() %>%
select(sample_id, condition, sample_type, time.point, biol.batch) %>% left_join(assay(experiment), by = rownames(.))
rowData(experiment) %>%
select(sample_id, condition, sample_type, time.point, biol.batch) %>% left_join(assay(experiment), by = rownames(.))
rowData(experiment) %>%
as.tibble() %>%
select(sample_id, condition, sample_type, time.point, biol.batch) %>%
left_join(
SummarizedExperiment::assay(experiment) %>%
mutate(
sample_id = rownames(.)), by = "sample_id"
)
metabData <- rowData(experiment) %>%
as.tibble() %>%
select(sample_id, condition, sample_type, time.point, biol.batch) %>%
left_join(
SummarizedExperiment::assay(experiment) %>%
mutate(
sample_id = rownames(.)), by = "sample_id"
)
styler:::style_active_file()
View(metabData)
sampledata <- data(st000336)
load("data/st000336.rda")
View(st000336)
BiocManager::install("metabolomicsWorkbenchR")
install.packages("metabolomicsWorkbenchR")
# BiocManager::install("metabolomicsWorkbenchR")
library(metabolomicsWorkbenchR)
S = do_query('study','study_id','ST000336','summary')
S
t(S)
names(metabolomicsWorkbenchR::context)
context_inputs('study')
context_outputs('study')
DE = do_query('study','analysis_id','ST000336','DatasetExperiment')
context_outputs('study')
context_outputs('analysis_id')
context_inputs('study')
context_outputs('study')
do_query(context = "study", input_item = "ignored", input_value = "ignored", output_item = "DatasetExperiment")
do_query(
context = 'study',
input_item = 'ignored',
input_value = 'ignored',
output_item = 'untarg_studies'
)
US= do_query(
context = 'study',
input_item = 'ignored',
input_value = 'ignored',
output_item = 'untarg_studies'
)
t(S)
context_outputs('study')
S = do_query('study','study_id','ST000336','analysis')
S
t(S)
context_outputs('study')
do_query(context = "study", input_item = "study_id", input_value = "ST000336", output_item = "SummarizedExperiment")
Experimetn1 <- do_query(context = "study", input_item = "study_id", input_value = "ST000336", output_item = "SummarizedExperiment")
View(Experimetn1)
Experimetn1[["AN004436"]]
print(t(do_query(context = "study", input_item = "study_id", input_value = "ST000336", output_item = "analysis")))
View(st000336)
st000336
experimentData(st000336)
View(st000336)
st000336@assayData[["exprs"]]
st000336@assayData[["exprs"]]
getOption("max.print")
options(max.print = 5000)
st000336@assayData[["exprs"]]
Experimetn1[["AN004436"]]@assays@data@listData[[1]]
Experimetn1[["AN004437"]]@assays@data@listData[[1]]
st000336@assayData[["exprs"]]
print(t(do_query(context = "study", input_item = "study_id", input_value = "ST000336", output_item = "analysis")))
DE <- do_query('study','analysis_id','AN004436','DatasetExperiment')
DE <- do_query('study','analysis_id','AN004436','DatasetExperiment')
DE
SE <- do_query(context = "study", input_item = "analysis_id", input_value = "AN004436", output_item = "SummarizedExperiment")
SEDE <- as.DatasetExperiment(SE)
View(SEDE)
View(DE)
colData(DE)
DE <- do_query(context = "study", input_item = "analysis_id", input_value = "AN004436", output_item = "DatasetExperiment")
colData(DE)
rowData(DE)
View(rowData(DE))
rowData(DE)@rownames
rowData(DE)@listData[["Diagnosis"]]
rowData(DE)@listData[["steroid_status"]]
assay(DE)
devtools::install_github(repo="krumsieklab/maplet@v1.2.1", subdir="maplet")
library(maplet)
library(tidyverse)
E <-
mt_load_metabolomics_workbench(
study_id = "ST000336",
analysis_id = "AN004436"
) %>%
mt_anno_rename(anno_type = "features", old_col_names = "Metabolite", new_col_names = "name") %>%
mt_clean_validate_se() %>%
# # log assay dimensions and number of columns for both metabolite and clincial annotations
mt_reporting_data() %>%
# start timing
mt_reporting_tic() %>%
{.}
View(DE)
E <-
mt_load_metabolomics_workbench(
study_id = "ST000336",
analysis_id = "AN004436"
) %>%
mt_anno_rename(anno_type = "features", old_col_names = "Metabolite", new_col_names = "name") %>%
# mt_clean_validate_se() %>%
# # log assay dimensions and number of columns for both metabolite and clincial annotations
mt_reporting_data() %>%
# start timing
mt_reporting_tic() %>%
{.}
View(E)
E <-
mt_load_metabolomics_workbench(
study_id = "ST000336",
analysis_id = "AN004436"
) %>%
mt_anno_rename(anno_type = "features", old_col_names = "Metabolite", new_col_names = "name") %>%
# mt_clean_validate_se() %>%
# # log assay dimensions and number of columns for both metabolite and clincial annotations
mt_reporting_data() %>%
# start timing
mt_reporting_tic() %>%
{.}
rownames(D)
colnames(D)
rownames(E)
