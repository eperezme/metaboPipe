# Change working directory
setwd("Analysis")
# Initialize MetaboAnalyst data objects
mSet <- InitDataObjects("conc", "stat", FALSE)
# Read text data
mSet <- Read.TextData(mSet, "MetaboAnalystData.csv", "rowu", "disc")
setwd("C:/Users/eduar/Desktop/TFM/Work")
library(MetaboAnalystR)
# Save WD
back_wd <- getwd()
# Change working directory
setwd("Analysis")
# Initialize MetaboAnalyst data objects
mSet <- InitDataObjects("conc", "stat", FALSE)
# Read text data
mSet <- Read.TextData(mSet, "MetaboAnalystData.csv", "rowu", "disc")
# Print read message
print(mSet$msgSet$read.msg)
mSet <- SanityCheckData(mSet)
# Perform sanity check on data
tryCatch({
mSet <- SanityCheckData(mSet)
mSet <- RemoveMissingPercent(mSet, percent = 0.5)
mSet <- ImputeMissingVar(mSet, method = "exclude")
}, error = function(e) {
cat("Error occurred during data processing:", conditionMessage(e), "\n")
})
tar_make()
targets::tar_make()
setwd("C:/Users/eduar/Desktop/TFM/Work")
targets::tar_make()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
targets::tar_make()
library(targets)
tar_load(dataMatrix)
tar_load(sampleMetadata)
tar_load(variableMetadata)
View(dataMatrix)
tar_make()
tar_make()
tar_make()
library(MetaboAnalystR)
tar_make()
tar_make()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_make()
tar_poll()
tar_progress_summary()
tar_progress()
tar_watch()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_make()
tar_make()
library(qs)
qs::qread('Analyst/data_proc.qs')
qs::qread('data_proc.qs')
qs::qread('Analysis/data_proc.qs')
test <- qs::qread('Analysis/data_proc.qs')
View(test)
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_make()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_make()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_make()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_make()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_make()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_make()\
tar_make()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
View(test)
View(variableMetadata)
View(sampleMetadata)
View(dataMatrix)
tar_make()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_make()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_make()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_make()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_make()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_make()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_make()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_make()
tar_make()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_make()
install.packages(c("texlive", "texlive-fonts-extra"))
install.packages("texlive")
install.packages("texlive")
library(texlive)
library(texlive)
tar_make()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_make()
library(MetaboAnalystR)
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
library(targets)
tar_visnetwork()
tar_manifest()
tar_manifest()
tar_make()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_make()
tar_meta(fields = warnings, complete_only = TRUE)
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_make()
library(qs)
qload('Analysis/complete_norm.qs')
qload('Analysis/complete_norm.qs')
qload('Analysis/row_norm.qs')
data <- read.csv("Analysis/data_normalized.csv", header = TRUE, row.names = 1)
View(data)
data <- t(data)
data <- read.csv("Analysis/data_normalized.csv", row.names = 1)
data <- read.csv("Analysis/data_normalized.csv", header = F, row.names = 1)
data <- t(data)
data <- read.csv("Analysis/data_normalized.csv", header = F, row.names = 1) %>% t()
library(dplyr)
data <- read.csv("Analysis/data_normalized.csv", header = F, row.names = 1) %>% t()
View(data)
tar_load(filtered_experiment)
View(data)
View(data)
data <- read.csv("Analysis/data_normalized.csv", header = F, row.names = 1) %>% t() %>% as.data.frame()
data <- read.csv("Analysis/data_normalized.csv", header = F, row.names = 1) %>% t() %>% mutate(V1 = numeric(V1))
data <- read.csv("Analysis/data_normalized.csv", header = F, row.names = 1) %>% t() %>% as.data.frame() %>% mutate(V1 = numeric(V1))
data <- read.csv("Analysis/data_normalized.csv", header = F, row.names = 1) %>% t() %>% as.data.frame() %>% mutate(V1 = as.numeric(V1))
data <- read.csv("Analysis/data_normalized.csv", header = F, row.names = 1) %>%
t() %>%
as.data.frame() %>%
mutate(V1 = as.numeric(V1)) %>%
rename(sample_id = V1)
tar_make()
tar_make()
tar_make()
tar_make()
tar_load(na_experiment)
View(na_experiment)
na_experiment@assays
assay(na_experiment)
library(SummarizedExperiment)
library(structToolbox)
assay(na_experiment)
tar_make()
tar_make()
source("C:/Users/eduar/Desktop/TFM/Work/R/imputation.R")
tar_make()
source("C:/Users/eduar/Desktop/TFM/Work/R/imputation.R")
tar_make()
tar_make()
tar_make()
tar_make()
tar_load(normalized)
View(normalized)
tar_load(filtered_experiment)
View(normalized)
tar_make()
tar_make()
tar_make()
tar_load(normalized)
View(normalized)
View(normalized)
View(normalized)
tar_make()
tar_make()
tar_load(normalized)
test <- assay(filtered_experiment)
test
View(normalized)
View(normalized)
View(test)
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
targets::tar_meta(fields = warnings, complete_only = TRUE)
tar_visnetwork()
renv::status()
renv::snapshot()
tar_make()
# Now we have to rebuild the dataset_experiment object
data <- read.csv("Analysis/data_normalized.csv", header = F, row.names = 1) %>%
t() %>%
as.data.frame() %>%
rename(sample_id = V1) %>%
arrange(sample_id)
data <- read.csv("Analysis/data_normalized.csv", header = F, row.names = 1)
View(data)
data <- read.csv("Analysis/data_normalized.csv", header = F, row.names = 1)
View(data)
data <- read.csv("Analysis/data_normalized.csv", header = F, row.names = 1)
View(data)
data <- t(data)
data <- as.data.frame(data)
# Now we have to rebuild the dataset_experiment object
data <- read.csv("Analysis/data_normalized.csv", header = F, row.names = 1) %>%
t() %>%
rename(sample_id = V1) %>%
arrange(sample_id)
# Now we have to rebuild the dataset_experiment object
data <- read.csv("Analysis/data_normalized.csv", header = F, row.names = 1) %>%
t() %>%
rename(sample_id = V1) %>%
arrange(sample_id)
tar_watch()
tar_make()
tar_make()
tar_load(normalized)
tar_make()
tar_load(normalized)
View(normalized)
tar_make()
targets::tar_meta(fields = warnings, complete_only = TRUE)
tar_load(normalized)
View(normalized)
tar_load(filtered_experiment)
data <- assay(filtered_experiment)
View(data)
tar_make()
tar_make()
tar_load(normalized)
View(normalized)
View(normalized)
tar_make()
tar_make()
tar_load(normalized)
View(normalized)
View(normalized)
# Now we have to rebuild the dataset_experiment object
normalizedData <- read.csv("Analysis/data_normalized.csv", header = F, row.names = 1) %>%
t() %>%
as.data.frame() %>%
rename(sample_id = V1)
normalizedData <- read.csv("Analysis/data_normalized.csv", header = F, row.names = 1)
normalizedData <- t(normalizedData)
normalizedData
View(normalizedData)
tar_make()
tar_make()
tar_load(normalized)
View(normalized)
tar_make()
tar_make()
View(normalized)
tar_make()
tar_load(normalized)
View(normalized)
normalized@assays@data@listData[[1]]
library(targets)
library(structToolbox)
library(SummarizedExperiment)
tar_visnetwork()
tar_glimpse()
tar_destroy()
tar_make()
tar_load(dataMatrix)
dataMatrix[1,]
dataMatrix[,1]
dataMatrix[1]
dataMatrix[1,]
dataMatrix[,1]
tar_make()
tar_destroy()
tar_make()
tar_destroy()
tar_destroy()
tar_destroy()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_destroy()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_load(variableMetadata)
View(variableMetadata)
tar_make()
tar_make()
tar_make()
tar_make()
list(
tar_target_raw("experiment", quote(impute_warper(experiment, method, ...)))
)
# FACTORY
target_impute <- function(experiment, method, ...) {
list(
tar_target_raw("experiment", quote(impute_warper(experiment, method, ...)), deployment = "main")
)
}
target_impute
# FACTORY
impute <- function(experiment, method, ...) {
list(
tar_target_raw("experiment", quote(impute_warper(experiment, method, ...)), deployment = "main")
)
}
tar_make()
tar_make()
tar_manifest()
load_data <- funciton(dataMatrixFile, sampleMetadataFile, variableMetadataFile = NULL, separator = ",") {
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
load_data <- function(dataMatrixFile, sampleMetadataFile, variableMetadataFile = NULL, separator = ",") {
list(
tar_target_raw("matrixFile", dataMatrixFile, format = "file", deployment = "main"),
tar_target_raw("sampleFile", sampleMetadataFile, format = "file", deployment = "main"),
tar_target_raw("variableFile", variableMetadataFile, format = "file", deployment = "main"),
tar_target_raw("dataMatrix", quote(read.csv(matrixFile, sep = separator, header = TRUE)), format = "table", deployment = "main"),
tar_target_raw("sampleMetadata", quote(read.csv(sampleFile, sep = separator)), format = "table", deployment = "main"),
tar_target_raw("variableMetadata", quote(read.csv(variableFile, sep = separator)), format = "table", deployment = "main")
)
}
tar_manifest()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_manifest()
tar_manifest()
tar_manifest()
tar_manifest()
tar_manifest()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_manifest()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_manifest()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_manifest()
tar_manifest()
tar_manifest()
tar_manifest()
tar_manifest()
tar_manifest()
tar_manifest()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_manifest()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_manifest()
tar_manifest()
tar_make()
tar_manifest(fields = command)
tar_manifest()
tar_manifest(fields = command)
tar_manifest()
tar_manifest()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_manifest()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_manifest(fields = command)
tar_make()
tar_make()
install.packages("fst")
install.packages("fst")
tar_make()
tar_make()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_make()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_make()
tar_load(experiment)
View(experiment)
experiment$sample_meta
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_make()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_make()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_make()
tar_load(factorized_experiment)
View(factorized_experiment)
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_make()
tar_load(factorized_experiment)
View(factorized_experiment)
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_make()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_make()
tar_make()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_make()\
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
View(impute)
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_destroy()
tar_make()
targets::tar_meta(fields = warnings, complete_only = TRUE)
tar_destroy()
tar_make()
targets::tar_meta(fields = warnings, complete_only = TRUE)
M <- mv_sample_filter(mv_threshold = threshold*100) + mv_feature_filter(threshold = threshold*100, method = "across", factor_name = 'sample_type')
M <- mv_sample_filter(mv_threshold = 0.8*100) + mv_feature_filter(threshold = 0.8*100, method = "across", factor_name = 'sample_type')
C <- mv_sample_filter_hist()
tar_load(experiment)
M = model_apply(M, experiment)
chart_plot(C,M)
chart_plot(C, predicted(M))
M <- mv_sample_filter(mv_threshold = 0.8*100) + mv_feature_filter(threshold = 0.8*100, method = "across", factor_name = 'sample_type')
C <- mv_sample_filter_hist()
chart_plot(C,M)
M = model_apply(M, experiment)
chart_plot(C,M)
chart_plot(C,M[1])
chart_plot(C,M[2])
VIM::aggr(SummarizedExperiment::assay(experiment), plot = plot)
VIM::aggr(SummarizedExperiment::assay(experiment))
VIM::aggr(experiment$data)
VIM::histMiss(experiment$data)
VIM::matrixplot(experiment$data)
View(experiment$data)
VIM::aggr(experiment$data, numbers = TRUE, prop = c(TRUE,FALSE))
VIM::aggr(experiment$data, numbers = TRUE
)
VIM::aggr(experiment$data, numbers = TRUE)
VIM::aggr(experiment$data, numbers = TRUE)
VIM::aggr(experiment$data, numbers = TRUE)
VIM::aggr(experiment$data, numbers = TRUE)
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_visnetwork()
tar_visnetwork()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
