labs(title = "Scatterplot of PCA scores", subtitle = "PC1 vs. PC2", x = "PC1", y = "PC2", fill = "T2", caption = "Figure 1: Hotelling's T2 ellipse obtained\n using the ellipseParam function") +
theme_grey()
coord_x <- HotellingEllipse::ellipseCoord(data = pca_scores, pcx = 1, pcy = 3, conf.limit = .90, pts = 500)
coord_x
plot_hotelling <- funciton(dataset_experiment, nPCs=5) {
plot_hotelling <- funciton(dataset_experiment, nPCs=5) {
plot_hotelling <- function(dataset_experiment, nPCs=5) {
# Perform PCA
M <- structToolbox::knn_impute() + structToolbox::mean_centre() + structToolbox::PCA(number_components = nPCs)
M <- structToolbox::model_apply(M, dataset_experiment)
# Extract pca_scores
pca_scores <- M[3]$scores$data %>% as_tibble()
res_PCs <- ellipseParam(data = pca_scores, k = 2)
tibble(
T2 = pluck(res_PCs, "Tsquare", "value"),
obs = rownames(pca_scores)
) %>%
ggplot() +
geom_point(aes(x = obs, y = T2, fill = T2), shape = 21, size = 3, color = "black") +
geom_segment(aes(x = obs, y = T2, xend = obs, yend = 0), size = .5) +
scale_fill_gradient(low = "black", high = "red", guide = "none") +
geom_hline(yintercept = pluck(res_PCs, "cutoff.99pct"), linetype = "dashed", color = "darkred", size = .5) +
geom_hline(yintercept = pluck(res_PCs, "cutoff.95pct"), linetype = "dashed", color = "darkblue", size = .5) +
annotate("text", x = 80, y = 13, label = "99% limit", color = "darkred") +
annotate("text", x = 80, y = 9, label = "95% limit", color = "darkblue") +
labs(x = "Observations", y = paste0("Hotelling’s T-squared (", nPCS, "PCs)"),
fill = "T2 stats", caption = "Hotelling’s T-squared vs. Observations") +
theme_bw()
}
plot_hotelling <- function(experiment, 5)
plot_hotelling(experiment, 5)
plot_hotelling <- function(dataset_experiment, nPCs=5, nPCs_to_plot = 2) {
# Perform PCA
M <- structToolbox::knn_impute() + structToolbox::mean_centre() + structToolbox::PCA(number_components = nPCs)
M <- structToolbox::model_apply(M, dataset_experiment)
# Extract pca_scores
pca_scores <- M[3]$scores$data %>% as_tibble()
res_PCs <- ellipseParam(data = pca_scores, k = 2)
tibble(
T2 = pluck(res_PCs, "Tsquare", "value"),
obs = rownames(pca_scores)
) %>%
ggplot() +
geom_point(aes(x = obs, y = T2, fill = T2), shape = 21, size = 3, color = "black") +
geom_segment(aes(x = obs, y = T2, xend = obs, yend = 0), size = .5) +
scale_fill_gradient(low = "black", high = "red", guide = "none") +
geom_hline(yintercept = pluck(res_PCs, "cutoff.99pct"), linetype = "dashed", color = "darkred", size = .5) +
geom_hline(yintercept = pluck(res_PCs, "cutoff.95pct"), linetype = "dashed", color = "darkblue", size = .5) +
annotate("text", x = 80, y = 13, label = "99% limit", color = "darkred") +
annotate("text", x = 80, y = 9, label = "95% limit", color = "darkblue") +
labs(x = "Observations", y = paste0("Hotelling’s T-squared (", nPCs_to_plot, "PCs)"),
fill = "T2 stats", caption = "Hotelling’s T-squared vs. Observations") +
theme_bw()
}
plot_hotelling(experiment, 5)
plot_hotelling(experiment, 5, 3)
plot_hotelling(experiment, 5, 2)
plot_hotelling(experiment, 5, 1)
plot_hotelling(experiment, 5, 2)
plot_hotelling(experiment, 5, 3)
plot_hotelling <- function(dataset_experiment, nPCs=5, nPCs_to_plot = 2) {
# Perform PCA
M <- structToolbox::knn_impute() + structToolbox::mean_centre() + structToolbox::PCA(number_components = nPCs)
M <- structToolbox::model_apply(M, dataset_experiment)
# Extract pca_scores
pca_scores <- M[3]$scores$data %>% as_tibble()
res_PCs <- ellipseParam(data = pca_scores, k = nPCs_to_plot)
tibble(
T2 = pluck(res_PCs, "Tsquare", "value"),
obs = rownames(pca_scores)
) %>%
ggplot() +
geom_point(aes(x = obs, y = T2, fill = T2), shape = 21, size = 3, color = "black") +
geom_segment(aes(x = obs, y = T2, xend = obs, yend = 0), size = .5) +
scale_fill_gradient(low = "black", high = "red", guide = "none") +
geom_hline(yintercept = pluck(res_PCs, "cutoff.99pct"), linetype = "dashed", color = "darkred", size = .5) +
geom_hline(yintercept = pluck(res_PCs, "cutoff.95pct"), linetype = "dashed", color = "darkblue", size = .5) +
annotate("text", x = 80, y = 13, label = "99% limit", color = "darkred") +
annotate("text", x = 80, y = 9, label = "95% limit", color = "darkblue") +
labs(x = "Observations", y = paste0("Hotelling’s T-squared (", nPCs_to_plot, "PCs)"),
fill = "T2 stats", caption = "Hotelling’s T-squared vs. Observations") +
theme_bw()
}
plot_hotelling(experiment, 5, 3)
plot_hotelling(experiment, 5, 5)
plot_hotelling_pca <- function(dataset_experiment, nPCs=5){
# Perform PCA
M <- structToolbox::knn_impute() + structToolbox::mean_centre() + structToolbox::PCA(number_components = nPCs)
M <- structToolbox::model_apply(M, dataset_experiment)
# Extract pca_scores
pca_scores <- M[3]$scores$data %>% as_tibble()
# Calculate Hotelling's T2 ellipse params
res_PCs <- HotellingEllipse::ellipseParam(data = pca_scores, k = 2, pcx = 1, pcy = 2)
# Extract Hotelling's T2 values
T2 <- purr::pluck(res_PCs, "Tsquare", "value")
# # Extract ellipse params for plotting
a99 <- purr::pluck(res_PCs, "Ellipse", "a.99pct")
b99 <- purr::pluck(res_PCs, "Ellipse", "b.99pct")
a95 <- purr::pluck(res_PCs, "Ellipse", "a.95pct")
b95 <- purr::pluck(res_PCs, "Ellipse", "b.95pct")
# Plot PCA scores
pca_scores %>%
ggplot(aes(x = PC1, y = PC2)) +
geom_ellipse(aes(x0 = 0, y0 = 0, a = a99, b = b99, angle = 0), size = .5, linetype = "dotted", fill = "white") +
geom_ellipse(aes(x0 = 0, y0 = 0, a = a95, b = b95, angle = 0), size = .5, linetype = "dashed", fill = "white") +
geom_point(aes(fill = T2), shape = 21, size = 3, color = "black") +
scale_fill_viridis_c(option = "viridis") +
geom_hline(yintercept = 0, linetype = "solid", color = "black", size = .2) +
geom_vline(xintercept = 0, linetype = "solid", color = "black", size = .2) +
labs(title = "Scatterplot of PCA scores", subtitle = "PC1 vs. PC2", x = "PC1", y = "PC2",
fill = "T2", caption = "Hotelling's T2 ellipse") +
theme_bw()
}
plot_hotelling_pca(experiment, 5)
plot_hotelling_pca <- function(dataset_experiment, nPCs=5){
# Perform PCA
M <- structToolbox::knn_impute() + structToolbox::mean_centre() + structToolbox::PCA(number_components = nPCs)
M <- structToolbox::model_apply(M, dataset_experiment)
# Extract pca_scores
pca_scores <- M[3]$scores$data %>% as_tibble()
# Calculate Hotelling's T2 ellipse params
res_PCs <- HotellingEllipse::ellipseParam(data = pca_scores, k = 2, pcx = 1, pcy = 2)
# Extract Hotelling's T2 values
T2 <- purrr::pluck(res_PCs, "Tsquare", "value")
# # Extract ellipse params for plotting
a99 <- purrr::pluck(res_PCs, "Ellipse", "a.99pct")
b99 <- purrr::pluck(res_PCs, "Ellipse", "b.99pct")
a95 <- purrr::pluck(res_PCs, "Ellipse", "a.95pct")
b95 <- purrr::pluck(res_PCs, "Ellipse", "b.95pct")
# Plot PCA scores
pca_scores %>%
ggplot(aes(x = PC1, y = PC2)) +
geom_ellipse(aes(x0 = 0, y0 = 0, a = a99, b = b99, angle = 0), size = .5, linetype = "dotted", fill = "white") +
geom_ellipse(aes(x0 = 0, y0 = 0, a = a95, b = b95, angle = 0), size = .5, linetype = "dashed", fill = "white") +
geom_point(aes(fill = T2), shape = 21, size = 3, color = "black") +
scale_fill_viridis_c(option = "viridis") +
geom_hline(yintercept = 0, linetype = "solid", color = "black", size = .2) +
geom_vline(xintercept = 0, linetype = "solid", color = "black", size = .2) +
labs(title = "Scatterplot of PCA scores", subtitle = "PC1 vs. PC2", x = "PC1", y = "PC2",
fill = "T2", caption = "Hotelling's T2 ellipse") +
theme_bw()
}
plot_hotelling_pca(experiment, 5)
tar_load(experiment)
plot_hotelling_pca(experiment, 5)
plot_hotelling_pca <- function(dataset_experiment, nPCs=5){
# Perform PCA
M <- structToolbox::knn_impute() + structToolbox::mean_centre() + structToolbox::PCA(number_components = nPCs)
M <- structToolbox::model_apply(M, dataset_experiment)
# Extract pca_scores
pca_scores <- M[3]$scores$data %>% as_tibble()
# Calculate Hotelling's T2 ellipse params
res_PCs <- HotellingEllipse::ellipseParam(data = pca_scores, k = 2, pcx = 1, pcy = 2)
# Extract Hotelling's T2 values
T2 <- purrr::pluck(res_PCs, "Tsquare", "value")
# # Extract ellipse params for plotting
a99 <- purrr::pluck(res_PCs, "Ellipse", "a.99pct")
b99 <- purrr::pluck(res_PCs, "Ellipse", "b.99pct")
a95 <- purrr::pluck(res_PCs, "Ellipse", "a.95pct")
b95 <- purrr::pluck(res_PCs, "Ellipse", "b.95pct")
# Plot PCA scores
pca_scores %>%
ggplot(aes(x = PC1, y = PC2)) +
geom_ellipse(aes(x0 = 0, y0 = 0, a = a99, b = b99, angle = 0), size = .5, linetype = "dotted", fill = "white") +
geom_ellipse(aes(x0 = 0, y0 = 0, a = a95, b = b95, angle = 0), size = .5, linetype = "dashed", fill = "white") +
geom_point(aes(fill = T2), shape = 21, size = 3, color = "black") +
scale_fill_viridis_c(option = "viridis") +
# geom_hline(yintercept = 0, linetype = "solid", color = "black", size = .2) +
# geom_vline(xintercept = 0, linetype = "solid", color = "black", size = .2) +
labs(title = "Scatterplot of PCA scores", subtitle = "PC1 vs. PC2", x = "PC1", y = "PC2",
fill = "T2", caption = "Hotelling's T2 ellipse with 99(exterior line) and 95(interior line) confidence intervals") +
theme_bw()
}
# Function to plot Hotelling's T-squared vs. Observations
plot_hotelling_obs <- function(dataset_experiment, nPCs=5, nPCs_to_plot = 2) {
# Perform PCA
M <- structToolbox::knn_impute() + structToolbox::mean_centre() + structToolbox::PCA(number_components = nPCs)
M <- structToolbox::model_apply(M, dataset_experiment)
# Extract pca_scores
pca_scores <- M[3]$scores$data %>% as_tibble()
res_PCs <- ellipseParam(data = pca_scores, k = nPCs_to_plot)
tibble(
T2 = purrr::pluck(res_PCs, "Tsquare", "value"),
obs = rownames(pca_scores)
) %>%
ggplot() +
geom_point(aes(x = obs, y = T2, fill = T2), shape = 21, size = 3, color = "black") +
geom_segment(aes(x = obs, y = T2, xend = obs, yend = 0), size = .5) +
scale_fill_gradient(low = "black", high = "red", guide = "none") +
geom_hline(yintercept = pluck(res_PCs, "cutoff.99pct"), linetype = "dashed", color = "darkred", size = .5) +
geom_hline(yintercept = pluck(res_PCs, "cutoff.95pct"), linetype = "dashed", color = "darkblue", size = .5) +
annotate("text", x = 80, y = 13, label = "99% limit", color = "darkred") +
annotate("text", x = 80, y = 9, label = "95% limit", color = "darkblue") +
labs(x = "Observations", y = paste0("Hotelling’s T-squared (", nPCs_to_plot, "PCs)"),
fill = "T2 stats", caption = "Hotelling’s T-squared vs. Observations") +
theme_bw()
}
tar_load(experiment)
tar_load(filtered)
# Function to plot Hotelling's T-squared vs. Observations
plot_hotelling_obs <- function(dataset_experiment, nPCs=5, nPCs_to_plot = 2) {
# Perform PCA
M <- structToolbox::knn_impute() + structToolbox::mean_centre() + structToolbox::PCA(number_components = nPCs)
M <- structToolbox::model_apply(M, dataset_experiment)
# Extract pca_scores
pca_scores <- M[3]$scores$data %>% as_tibble()
res_PCs <- ellipseParam(data = pca_scores, k = nPCs_to_plot)
tibble(
T2 = purrr::pluck(res_PCs, "Tsquare", "value"),
obs = rownames(pca_scores)
) %>%
ggplot() +
geom_point(aes(x = obs, y = T2, fill = T2), shape = 21, size = 3, color = "black") +
geom_segment(aes(x = obs, y = T2, xend = obs, yend = 0), size = .5) +
scale_fill_gradient(low = "black", high = "red", guide = "none") +
geom_hline(yintercept = pluck(res_PCs, "cutoff.99pct"), linetype = "dashed", color = "darkred", size = .5) +
geom_hline(yintercept = pluck(res_PCs, "cutoff.95pct"), linetype = "dashed", color = "darkblue", size = .5) +
annotate("text", x = 80, y = 13, label = "99% limit", color = "darkred") +
annotate("text", x = 80, y = 9, label = "95% limit", color = "darkblue") +
labs(x = "Observations", y = paste0("Hotelling’s T-squared (", nPCs_to_plot, "PCs)"),
fill = "T2 stats", caption = "Hotelling’s T-squared vs. Observations") +
theme_bw()
}
plot_hotelling_pca <- function(dataset_experiment, nPCs=5){
# Perform PCA
M <- structToolbox::knn_impute() + structToolbox::mean_centre() + structToolbox::PCA(number_components = nPCs)
M <- structToolbox::model_apply(M, dataset_experiment)
# Extract pca_scores
pca_scores <- M[3]$scores$data %>% as_tibble()
# Calculate Hotelling's T2 ellipse params
res_PCs <- HotellingEllipse::ellipseParam(data = pca_scores, k = 2, pcx = 1, pcy = 2)
# Extract Hotelling's T2 values
T2 <- purrr::pluck(res_PCs, "Tsquare", "value")
# # Extract ellipse params for plotting
a99 <- purrr::pluck(res_PCs, "Ellipse", "a.99pct")
b99 <- purrr::pluck(res_PCs, "Ellipse", "b.99pct")
a95 <- purrr::pluck(res_PCs, "Ellipse", "a.95pct")
b95 <- purrr::pluck(res_PCs, "Ellipse", "b.95pct")
# Plot PCA scores
pca_scores %>%
ggplot(aes(x = PC1, y = PC2)) +
geom_ellipse(aes(x0 = 0, y0 = 0, a = a99, b = b99, angle = 0), size = .5, linetype = "dotted", fill = "white") +
geom_ellipse(aes(x0 = 0, y0 = 0, a = a95, b = b95, angle = 0), size = .5, linetype = "dashed", fill = "white") +
geom_point(aes(fill = T2), shape = 21, size = 3, color = "black") +
scale_fill_viridis_c(option = "viridis") +
# geom_hline(yintercept = 0, linetype = "solid", color = "black", size = .2) +
# geom_vline(xintercept = 0, linetype = "solid", color = "black", size = .2) +
labs(title = "Scatterplot of PCA scores", subtitle = "PC1 vs. PC2", x = "PC1", y = "PC2",
fill = "T2", caption = "Hotelling's T2 ellipse with 99(exterior line) and 95(interior line) confidence intervals") +
theme_bw()
}
plot_hotelling_pca(filtered, 5)
plot_hotelling_pca <- function(dataset_experiment, nPCs=5){
# Perform PCA
M <- structToolbox::knn_impute() + structToolbox::mean_centre() + structToolbox::PCA(number_components = nPCs)
M <- structToolbox::model_apply(M, dataset_experiment)
# Extract pca_scores
pca_scores <- M[3]$scores$data %>% as_tibble()
# Calculate Hotelling's T2 ellipse params
res_PCs <- HotellingEllipse::ellipseParam(data = pca_scores, k = 2, pcx = 1, pcy = 2)
# Extract Hotelling's T2 values
T2 <- purrr::pluck(res_PCs, "Tsquare", "value")
# # Extract ellipse params for plotting
a99 <- purrr::pluck(res_PCs, "Ellipse", "a.99pct")
b99 <- purrr::pluck(res_PCs, "Ellipse", "b.99pct")
a95 <- purrr::pluck(res_PCs, "Ellipse", "a.95pct")
b95 <- purrr::pluck(res_PCs, "Ellipse", "b.95pct")
# Plot PCA scores
pca_scores %>%
ggplot(aes(x = PC1, y = PC2)) +
geom_ellipse(aes(x0 = 0, y0 = 0, a = a99, b = b99, angle = 0), size = .5, linetype = "dotted", fill = "white") +
geom_ellipse(aes(x0 = 0, y0 = 0, a = a95, b = b95, angle = 0), size = .5, linetype = "dashed", fill = "white") +
geom_point(aes(fill = T2), shape = 21, size = 3, color = "black") +
scale_fill_viridis_c(option = "viridis") +
geom_hline(yintercept = 0, linetype = "solid", color = "black", size = .1) +
geom_vline(xintercept = 0, linetype = "solid", color = "black", size = .1) +
labs(title = "Scatterplot of PCA scores", subtitle = "PC1 vs. PC2", x = "PC1", y = "PC2",
fill = "T2", caption = "Hotelling's T2 ellipse with 99(exterior line) and 95(interior line) confidence intervals") +
theme_bw()
}
plot_hotelling_pca(filtered, 5)
plot_hotelling_pca <- function(dataset_experiment, nPCs=5){
# Perform PCA
M <- structToolbox::knn_impute() + structToolbox::mean_centre() + structToolbox::PCA(number_components = nPCs)
M <- structToolbox::model_apply(M, dataset_experiment)
# Extract pca_scores
pca_scores <- M[3]$scores$data %>% as_tibble()
# Calculate Hotelling's T2 ellipse params
res_PCs <- HotellingEllipse::ellipseParam(data = pca_scores, k = 2, pcx = 1, pcy = 2)
# Extract Hotelling's T2 values
T2 <- purrr::pluck(res_PCs, "Tsquare", "value")
# # Extract ellipse params for plotting
a99 <- purrr::pluck(res_PCs, "Ellipse", "a.99pct")
b99 <- purrr::pluck(res_PCs, "Ellipse", "b.99pct")
a95 <- purrr::pluck(res_PCs, "Ellipse", "a.95pct")
b95 <- purrr::pluck(res_PCs, "Ellipse", "b.95pct")
# Plot PCA scores
pca_scores %>%
ggplot(aes(x = PC1, y = PC2)) +
geom_ellipse(aes(x0 = 0, y0 = 0, a = a99, b = b99, angle = 0), size = .5, linetype = "dotted", fill = "white") +
geom_ellipse(aes(x0 = 0, y0 = 0, a = a95, b = b95, angle = 0), size = .5, linetype = "dashed", fill = "white") +
geom_point(aes(fill = T2), shape = 21, size = 3, color = "black") +
scale_fill_viridis_c(option = "viridis") +
geom_hline(yintercept = 0, linetype = "solid", color = "black", size = .1) +
geom_vline(xintercept = 0, linetype = "solid", color = "black", size = .1) +
labs(title = "Scatterplot of PCA scores", subtitle = "PC1 vs. PC2", x = "PC1", y = "PC2",
fill = "T2", caption = "Hotelling's T2 ellipse with 99(exterior line) and 95(interior line) confidence intervals") +
theme_bw() + theme(panel.grid = element_blank())
}
# Function to plot Hotelling's T-squared vs. Observations
plot_hotelling_obs <- function(dataset_experiment, nPCs=5, nPCs_to_plot = 2) {
# Perform PCA
M <- structToolbox::knn_impute() + structToolbox::mean_centre() + structToolbox::PCA(number_components = nPCs)
M <- structToolbox::model_apply(M, dataset_experiment)
# Extract pca_scores
pca_scores <- M[3]$scores$data %>% as_tibble()
res_PCs <- ellipseParam(data = pca_scores, k = nPCs_to_plot)
tibble(
T2 = purrr::pluck(res_PCs, "Tsquare", "value"),
obs = rownames(pca_scores)
) %>%
ggplot() +
geom_point(aes(x = obs, y = T2, fill = T2), shape = 21, size = 3, color = "black") +
geom_segment(aes(x = obs, y = T2, xend = obs, yend = 0), size = .5) +
scale_fill_gradient(low = "black", high = "red", guide = "none") +
geom_hline(yintercept = pluck(res_PCs, "cutoff.99pct"), linetype = "dashed", color = "darkred", size = .5) +
geom_hline(yintercept = pluck(res_PCs, "cutoff.95pct"), linetype = "dashed", color = "darkblue", size = .5) +
annotate("text", x = 80, y = 13, label = "99% limit", color = "darkred") +
annotate("text", x = 80, y = 9, label = "95% limit", color = "darkblue") +
labs(x = "Observations", y = paste0("Hotelling’s T-squared (", nPCs_to_plot, "PCs)"),
fill = "T2 stats", caption = "Hotelling’s T-squared vs. Observations") +
theme_bw() + theme(panel.grid = element_blank())
}
plot_hotelling_pca(filtered, 5)
# Function to plot Hotelling's T-squared vs. Observations
plot_hotelling_obs <- function(dataset_experiment, nPCs=5, nPCs_to_plot = 2) {
# Perform PCA
M <- structToolbox::knn_impute() + structToolbox::mean_centre() + structToolbox::PCA(number_components = nPCs)
M <- structToolbox::model_apply(M, dataset_experiment)
# Extract pca_scores
pca_scores <- M[3]$scores$data %>% as_tibble()
# Calculate Hotelling's T2 ellipse params
res_PCs <- ellipseParam(data = pca_scores, k = nPCs_to_plot)
# Plot
plt <- tibble(
T2 = purrr::pluck(res_PCs, "Tsquare", "value"),
obs = rownames(pca_scores)
) %>%
ggplot() +
geom_point(aes(x = obs, y = T2, fill = T2), shape = 21, size = 3, color = "black") +
geom_segment(aes(x = obs, y = T2, xend = obs, yend = 0), size = .5) +
scale_fill_gradient(low = "black", high = "red", guide = "none") +
geom_hline(yintercept = pluck(res_PCs, "cutoff.99pct"), linetype = "dashed", color = "darkred", size = .5) +
geom_hline(yintercept = pluck(res_PCs, "cutoff.95pct"), linetype = "dashed", color = "darkblue", size = .5) +
annotate("text", x = 80, y = 13, label = "99% limit", color = "darkred") +
annotate("text", x = 80, y = 9, label = "95% limit", color = "darkblue") +
labs(x = "Observations", y = paste0("Hotelling’s T-squared (", nPCs_to_plot, "PCs)"),
fill = "T2 stats", caption = "Hotelling’s T-squared vs. Observations") +
theme_bw() + theme(panel.grid = element_blank())
print(plt)
return(plt)
}
plot_hotelling_obs(filtered, 5)
# Function to plot Hotelling's T-squared vs. Observations
plot_hotelling_obs <- function(dataset_experiment, nPCs=5, nPCs_to_plot = 2) {
# Perform PCA
M <- structToolbox::knn_impute() + structToolbox::mean_centre() + structToolbox::PCA(number_components = nPCs)
M <- structToolbox::model_apply(M, dataset_experiment)
# Extract pca_scores
pca_scores <- M[3]$scores$data %>% as_tibble()
# Calculate Hotelling's T2 ellipse params
res_PCs <- ellipseParam(data = pca_scores, k = nPCs_to_plot)
# Plot
plt <- tibble(
T2 = purrr::pluck(res_PCs, "Tsquare", "value"),
obs = rownames(pca_scores)
) %>%
ggplot() +
geom_point(aes(x = obs, y = T2, fill = T2), shape = 21, size = 3, color = "black") +
geom_segment(aes(x = obs, y = T2, xend = obs, yend = 0), size = .5) +
scale_fill_gradient(low = "black", high = "red", guide = "none") +
geom_hline(yintercept = pluck(res_PCs, "cutoff.99pct"), linetype = "dashed", color = "darkred", size = .5) +
geom_hline(yintercept = pluck(res_PCs, "cutoff.95pct"), linetype = "dashed", color = "darkblue", size = .5) +
annotate("text", x = 80, y = 13, label = "99% limit", color = "darkred") +
annotate("text", x = 80, y = 9, label = "95% limit", color = "darkblue") +
labs(x = "Observations", y = paste0("Hotelling’s T-squared (", nPCs_to_plot, "PCs)"),
fill = "T2 stats", caption = "Hotelling’s T-squared vs. Observations") +
theme_bw() + theme(panel.grid = element_blank(), axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
print(plt)
return(plt)
}
plot_hotelling_obs(filtered, 5)
# Plot
plt <- tibble(
T2 = purrr::pluck(res_PCs, "Tsquare", "value"),
obs = rownames(pca_scores)
) %>%
ggplot() +
geom_point(aes(x = obs, y = T2, fill = T2), shape = 21, size = 3, color = "black") +
geom_segment(aes(x = obs, y = T2, xend = obs, yend = 0), size = .5) +
scale_fill_gradient(low = "black", high = "red", guide = "none") +
geom_hline(yintercept = pluck(res_PCs, "cutoff.99pct"), linetype = "dashed", color = "darkred", size = .5) +
geom_hline(yintercept = pluck(res_PCs, "cutoff.95pct"), linetype = "dashed", color = "darkblue", size = .5) +
annotate("text", x = 80, y = 13, label = "99% limit", color = "darkred") +
annotate("text", x = 80, y = 9, label = "95% limit", color = "darkblue") +
labs(x = "Observations", y = paste0("Hotelling’s T-squared (", nPCs_to_plot, "PCs)"),
fill = "T2 stats", caption = "Hotelling’s T-squared vs. Observations") +
theme_bw() + theme(panel.grid = element_blank(), axis.text.x = element_text(angle = 90))
# Function to plot Hotelling's T-squared vs. Observations
plot_hotelling_obs <- function(dataset_experiment, nPCs=5, nPCs_to_plot = 2) {
# Perform PCA
M <- structToolbox::knn_impute() + structToolbox::mean_centre() + structToolbox::PCA(number_components = nPCs)
M <- structToolbox::model_apply(M, dataset_experiment)
# Extract pca_scores
pca_scores <- M[3]$scores$data %>% as_tibble()
# Calculate Hotelling's T2 ellipse params
res_PCs <- ellipseParam(data = pca_scores, k = nPCs_to_plot)
# Plot
plt <- tibble(
T2 = purrr::pluck(res_PCs, "Tsquare", "value"),
obs = rownames(pca_scores)
) %>%
ggplot() +
geom_point(aes(x = obs, y = T2, fill = T2), shape = 21, size = 3, color = "black") +
geom_segment(aes(x = obs, y = T2, xend = obs, yend = 0), size = .5) +
scale_fill_gradient(low = "black", high = "red", guide = "none") +
geom_hline(yintercept = pluck(res_PCs, "cutoff.99pct"), linetype = "dashed", color = "darkred", size = .5) +
geom_hline(yintercept = pluck(res_PCs, "cutoff.95pct"), linetype = "dashed", color = "darkblue", size = .5) +
annotate("text", x = 80, y = 13, label = "99% limit", color = "darkred") +
annotate("text", x = 80, y = 9, label = "95% limit", color = "darkblue") +
labs(x = "Observations", y = paste0("Hotelling’s T-squared (", nPCs_to_plot, "PCs)"),
fill = "T2 stats", caption = "Hotelling’s T-squared vs. Observations") +
theme_bw() + theme(panel.grid = element_blank(), axis.text.x = element_text(angle = 90))
print(plt)
return(plt)
}
plot_hotelling_obs(filtered, 5)
# Function to plot Hotelling's T-squared vs. Observations
plot_hotelling_obs <- function(dataset_experiment, nPCs=5, nPCs_to_plot = 2) {
# Perform PCA
M <- structToolbox::knn_impute() + structToolbox::mean_centre() + structToolbox::PCA(number_components = nPCs)
M <- structToolbox::model_apply(M, dataset_experiment)
# Extract pca_scores
pca_scores <- M[3]$scores$data %>% as_tibble()
# Calculate Hotelling's T2 ellipse params
res_PCs <- ellipseParam(data = pca_scores, k = nPCs_to_plot)
# Plot
plt <- tibble(
T2 = purrr::pluck(res_PCs, "Tsquare", "value"),
obs = rownames(pca_scores)
) %>%
ggplot() +
geom_point(aes(x = obs, y = T2, fill = T2), shape = 21, size = 3, color = "black") +
geom_segment(aes(x = obs, y = T2, xend = obs, yend = 0), size = .5) +
scale_fill_gradient(low = "black", high = "red", guide = "none") +
geom_hline(yintercept = pluck(res_PCs, "cutoff.99pct"), linetype = "dashed", color = "darkred", size = .5) +
geom_hline(yintercept = pluck(res_PCs, "cutoff.95pct"), linetype = "dashed", color = "darkblue", size = .5) +
annotate("text", x = 80, y = 13, label = "99% limit", color = "darkred") +
annotate("text", x = 80, y = 9, label = "95% limit", color = "darkblue") +
labs(x = "Observations", y = paste0("Hotelling’s T-squared (", nPCs_to_plot, "PCs)"),
fill = "T2 stats", caption = "Hotelling’s T-squared vs. Observations") +
theme_bw() + theme(panel.grid = element_blank(), axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
print(plt)
return(plt)
}
# Function to plot Hotelling's T-squared vs. Observations
plot_hotelling_obs <- function(dataset_experiment, nPCs=5, nPCs_to_plot = 2) {
# Perform PCA
M <- structToolbox::knn_impute() + structToolbox::mean_centre() + structToolbox::PCA(number_components = nPCs)
M <- structToolbox::model_apply(M, dataset_experiment)
# Extract pca_scores
pca_scores <- M[3]$scores$data %>% as_tibble()
# Calculate Hotelling's T2 ellipse params
res_PCs <- ellipseParam(data = pca_scores, k = nPCs_to_plot)
# Plot
plt <- tibble(
T2 = purrr::pluck(res_PCs, "Tsquare", "value"),
obs = rownames(pca_scores)
) %>%
ggplot() +
geom_point(aes(x = obs, y = T2, fill = T2), shape = 21, size = 3, color = "black") +
geom_segment(aes(x = obs, y = T2, xend = obs, yend = 0), size = .5) +
scale_fill_gradient(low = "black", high = "red", guide = "none") +
geom_hline(yintercept = pluck(res_PCs, "cutoff.99pct"), linetype = "dashed", color = "darkred", size = .5) +
geom_hline(yintercept = pluck(res_PCs, "cutoff.95pct"), linetype = "dashed", color = "darkblue", size = .5) +
annotate("text", x = 80, y = 13, label = "99% limit", color = "darkred") +
annotate("text", x = 80, y = 9, label = "95% limit", color = "darkblue") +
labs(x = "Observations", y = paste0("Hotelling’s T-squared (", nPCs_to_plot, "PCs)"),
fill = "T2 stats", caption = "Hotelling’s T-squared vs. Observations") +
theme_bw() + theme(panel.grid = element_blank(), axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
print(plt)
return(plt)
}
plot_hotelling_obs(filtered, 5)
lintr:::addin_lint()
styler:::style_active_file()
tar_make()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::set_style_transformers()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
tar_make()
tar_manifest()
tar_make()
tar_make()
tar_make()
tar_make()
