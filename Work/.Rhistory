setwd("Analysis")
# Create a mSet object for MetaboAnalyst
mSet <- InitDataObjects("conc", "stat", FALSE)
mSet <- Read.TextData(mSet, "MetaboAnalystData.csv", "rowu", "disc")
print(mSet$msgSet$read.msg)
setwd(back_wd)
return(MetaboDataMatrix)
}
setwd(back_wd)
setwd("C:/Users/eduar/Desktop/TFM/Work")
toMetaboAnalyst(filtered_experiment, class_col = 'sample_type')
mSet <- SanityCheckData(mSet)
toMetaboAnalyst <- function(dataset_exp, class_col = "sample_type" ) {
# Extract data matrix
dataMatrix_extracted <- SummarizedExperiment::assay(dataset_exp)
sampleMetadata_extracted <- sample.data.extract(dataset_exp)
# Extract relevant information using dplyr
samples_name <- rownames(dataMatrix_extracted)
classes <- dplyr::pull(sampleMetadata_extracted, {{ class_col }})
# Create data frame for MetaboAnalyst
MetaboDataMatrix <- data.frame(Sample = samples_name,
Class = classes,
dataMatrix_extracted)
# Create a dir to save the processed data
dir.create("Analysis", showWarnings = FALSE)
# Save the data frame as a CSV file
write.csv(MetaboDataMatrix, file = "Analysis/MetaboAnalystData.csv", row.names = FALSE)
back_wd <- getwd()
setwd("Analysis")
# Create a mSet object for MetaboAnalyst
mSet <- InitDataObjects("conc", "stat", FALSE)
mSet <- Read.TextData(mSet, "MetaboAnalystData.csv", "rowu", "disc")
print(mSet$msgSet$read.msg)
mSet <- SanityCheckData(mSet)
setwd(back_wd)
return(MetaboDataMatrix)
}
toMetaboAnalyst(filtered_experiment, class_col = 'sample_type')
setwd("C:/Users/eduar/Desktop/TFM/Work")
tar_load(filtered_experiment)
toMetaboAnalyst <- function(dataset_exp, class_col = "sample_type" ) {
# Extract data matrix
dataMatrix_extracted <- SummarizedExperiment::assay(dataset_exp)
sampleMetadata_extracted <- sample.data.extract(dataset_exp)
# Extract relevant information using dplyr
samples_name <- rownames(dataMatrix_extracted)
classes <- dplyr::pull(sampleMetadata_extracted, {{ class_col }})
# Create data frame for MetaboAnalyst
MetaboDataMatrix <- data.frame(Sample = samples_name,
Class = classes,
dataMatrix_extracted)
# Create a dir to save the processed data
dir.create("Analysis", showWarnings = FALSE)
# Save the data frame as a CSV file
write.csv(MetaboDataMatrix, file = "Analysis/MetaboAnalystData.csv", row.names = FALSE)
back_wd <- getwd()
setwd("Analysis")
# Create a mSet object for MetaboAnalyst
mSet <- InitDataObjects("conc", "stat", FALSE)
mSet <- Read.TextData(mSet, "MetaboAnalystData.csv", "rowu", "disc")
print(mSet$msgSet$read.msg)
mSet <- SanityCheckData(mSet)
setwd(back_wd)
return(MetaboDataMatrix)
}
toMetaboAnalyst(filtered_experiment, class_col = 'sample_type')
# Function to extract sample metadata from experiment dataset
# This function extracts the sample metadata from a SummarizedExperiment object
# Arguments:
#   dataset_exp: Experiment dataset
# Returns:
#   Sample metadata
sample.data.extract <- function(dataset_exp) {
return(dataset_exp$sample_meta)
}
toMetaboAnalyst(filtered_experiment, class_col = 'sample_type')
toMetaboAnalyst <- function(dataset_exp, class_col = "sample_type" ) {
# Extract data matrix
dataMatrix_extracted <- SummarizedExperiment::assay(dataset_exp)
sampleMetadata_extracted <- sample.data.extract(dataset_exp)
# Extract relevant information using dplyr
samples_name <- rownames(dataMatrix_extracted)
classes <- dplyr::pull(sampleMetadata_extracted, {{ class_col }})
# Create data frame for MetaboAnalyst
MetaboDataMatrix <- data.frame(Sample = samples_name,
Class = classes,
dataMatrix_extracted)
# Create a dir to save the processed data
dir.create("Analysis", showWarnings = FALSE)
# Save the data frame as a CSV file
write.csv(MetaboDataMatrix, file = "Analysis/MetaboAnalystData.csv", row.names = FALSE)
back_wd <- getwd()
setwd("Analysis")
# Create a mSet object for MetaboAnalyst
mSet <- InitDataObjects("conc", "stat", FALSE)
mSet <- Read.TextData(mSet, "MetaboAnalystData.csv", "rowu", "disc")
print(mSet$msgSet$read.msg)
mSet <- SanityCheckData(mSet)
print(mSet$msgSet$sanity.msg)
mSet <- RemoveMissingPercent(mSet, percent=0.5)
setwd(back_wd)
return(MetaboDataMatrix)
}
toMetaboAnalyst(filtered_experiment, class_col = 'sample_type')
toMetaboAnalyst <- function(dataset_exp, class_col = "sample_type" ) {
# Extract data matrix
dataMatrix_extracted <- SummarizedExperiment::assay(dataset_exp)
sampleMetadata_extracted <- sample.data.extract(dataset_exp)
# Extract relevant information using dplyr
samples_name <- rownames(dataMatrix_extracted)
classes <- dplyr::pull(sampleMetadata_extracted, {{ class_col }})
# Create data frame for MetaboAnalyst
MetaboDataMatrix <- data.frame(Sample = samples_name,
Class = classes,
dataMatrix_extracted)
# Create a dir to save the processed data
dir.create("Analysis", showWarnings = FALSE)
# Save the data frame as a CSV file
write.csv(MetaboDataMatrix, file = "Analysis/MetaboAnalystData.csv", row.names = FALSE)
back_wd <- getwd()
setwd("Analysis")
# Create a mSet object for MetaboAnalyst
mSet <- InitDataObjects("conc", "stat", FALSE)
mSet <- Read.TextData(mSet, "MetaboAnalystData.csv", "rowu", "disc")
print(mSet$msgSet$read.msg)
mSet <- SanityCheckData(mSet)
print(mSet$msgSet$sanity.msg)
mSet <- RemoveMissingPercent(mSet, percent=0.5)
setwd(back_wd)
return(MetaboDataMatrix)
}
toMetaboAnalyst(filtered_experiment, class_col = 'sample_type')
toMetaboAnalyst <- function(dataset_exp, class_col = "sample_type" ) {
# Extract data matrix
dataMatrix_extracted <- SummarizedExperiment::assay(dataset_exp)
sampleMetadata_extracted <- sample.data.extract(dataset_exp)
# Extract relevant information using dplyr
samples_name <- rownames(dataMatrix_extracted)
classes <- dplyr::pull(sampleMetadata_extracted, {{ class_col }})
# Create data frame for MetaboAnalyst
MetaboDataMatrix <- data.frame(Sample = samples_name,
Class = classes,
dataMatrix_extracted)
# Create a dir to save the processed data
dir.create("Analysis", showWarnings = FALSE)
# Save the data frame as a CSV file
write.csv(MetaboDataMatrix, file = "Analysis/MetaboAnalystData.csv", row.names = FALSE)
back_wd <- getwd()
setwd("Analysis")
# Create a mSet object for MetaboAnalyst
mSet <- InitDataObjects("conc", "stat", FALSE)
mSet <- Read.TextData(mSet, "MetaboAnalystData.csv", "rowu", "disc")
print(mSet$msgSet$read.msg)
mSet <- SanityCheckData(mSet)
mSet <- RemoveMissingPercent(mSet, percent=0.5)
setwd(back_wd)
return(MetaboDataMatrix)
}
toMetaboAnalyst(filtered_experiment, class_col = 'sample_type')
toMetaboAnalyst <- function(dataset_exp, class_col = "sample_type" ) {
# Extract data matrix
dataMatrix_extracted <- SummarizedExperiment::assay(dataset_exp)
sampleMetadata_extracted <- sample.data.extract(dataset_exp)
# Extract relevant information using dplyr
samples_name <- rownames(dataMatrix_extracted)
classes <- dplyr::pull(sampleMetadata_extracted, {{ class_col }})
# Create data frame for MetaboAnalyst
MetaboDataMatrix <- data.frame(Sample = samples_name,
Class = classes,
dataMatrix_extracted)
# Create a dir to save the processed data
dir.create("Analysis", showWarnings = FALSE)
# Save the data frame as a CSV file
write.csv(MetaboDataMatrix, file = "Analysis/MetaboAnalystData.csv", row.names = FALSE)
back_wd <- getwd()
setwd("Analysis")
# Create a mSet object for MetaboAnalyst
mSet <- InitDataObjects("conc", "stat", FALSE)
mSet <- Read.TextData(mSet, "MetaboAnalystData.csv", "rowu", "disc")
print(mSet$msgSet$read.msg)
mSet <- SanityCheckData(mSet)
mSet <- RemoveMissingPercent(mSet, percent=0.5)
mSet <- ImputeMissingVar(mSet, method="exclude")
setwd(back_wd)
return(MetaboDataMatrix)
}
# Function to extract sample metadata from experiment dataset
# This function extracts the sample metadata from a SummarizedExperiment object
# Arguments:
#   dataset_exp: Experiment dataset
# Returns:
#   Sample metadata
sample.data.extract <- function(dataset_exp) {
return(dataset_exp$sample_meta)
}
# Function to extract data matrix from experiment dataset
# This function extracts the data matrix from a SummarizedExperiment object
# Arguments:
#   dataset_exp: Experiment dataset
# Returns:
#   Data matrix
data.extract <- function(dataset_exp) {
return(SummarizedExperiment::assay(dataset_exp))
}
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
setwd("C:/Users/eduar/Desktop/TFM/Work")
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
library(targets)
tar_load(fitlered_experiment)
tar_load(filtered_experiment)
toMetaboAnalyst(filtered_experiment, class_col = 'sample_type')
toMetaboAnalyst <- function(dataset_exp, class_col = "sample_type" ) {
library(MetaboAnalystR)
# Extract data matrix
dataMatrix_extracted <- SummarizedExperiment::assay(dataset_exp)
sampleMetadata_extracted <- sample.data.extract(dataset_exp)
# Extract relevant information using dplyr
samples_name <- rownames(dataMatrix_extracted)
classes <- dplyr::pull(sampleMetadata_extracted, {{ class_col }})
# Create data frame for MetaboAnalyst
MetaboDataMatrix <- data.frame(Sample = samples_name,
Class = classes,
dataMatrix_extracted)
# Create a dir to save the processed data
dir.create("Analysis", showWarnings = FALSE)
# Save the data frame as a CSV file
write.csv(MetaboDataMatrix, file = "Analysis/MetaboAnalystData.csv", row.names = FALSE)
back_wd <- getwd()
setwd("Analysis")
# Create a mSet object for MetaboAnalyst
mSet <- InitDataObjects("conc", "stat", FALSE)
mSet <- Read.TextData(mSet, "MetaboAnalystData.csv", "rowu", "disc")
print(mSet$msgSet$read.msg)
mSet <- SanityCheckData(mSet)
mSet <- RemoveMissingPercent(mSet, percent=0.5)
mSet <- ImputeMissingVar(mSet, method="exclude")
setwd(back_wd)
return(MetaboDataMatrix)
}
toMetaboAnalyst(filtered_experiment, class_col = 'sample_type')
setwd("C:/Users/eduar/Desktop/TFM/Work")
toMetaboAnalyst(filtered_experiment, class_col = 'sample_type')
setwd("C:/Users/eduar/Desktop/TFM/Work")
setwd("C:/Users/eduar/Desktop/TFM/Work")
toMetaboAnalyst(filtered_experiment, class_col = 'sample_type')
setwd("C:/Users/eduar/Desktop/TFM/Work")
toMetaboAnalyst <- function(dataset_exp, class_col = "sample_type") {
library(MetaboAnalystR)
# Extract data matrix
dataMatrix_extracted <- SummarizedExperiment::assay(dataset_exp)
sampleMetadata_extracted <- sample.data.extract(dataset_exp)
# Extract relevant information using dplyr
samples_name <- rownames(dataMatrix_extracted)
classes <- dplyr::pull(sampleMetadata_extracted, {{ class_col }})
# Create data frame for MetaboAnalyst
MetaboDataMatrix <- data.frame(Sample = samples_name,
Class = classes,
dataMatrix_extracted)
# Create a directory to save the processed data
dir.create("Analysis", showWarnings = FALSE)
# Save the data frame as a CSV file
write.csv(MetaboDataMatrix, file = "Analysis/MetaboAnalystData.csv", row.names = FALSE)
# Change working directory
back_wd <- getwd()
setwd("Analysis")
# Initialize MetaboAnalyst data objects
mSet <- InitDataObjects("conc", "stat", FALSE)
# Read text data
mSet <- Read.TextData(mSet, "MetaboAnalystData.csv", "rowu", "disc")
# Print read message
print(mSet$msgSet$read.msg)
# Perform sanity check on data
tryCatch({
mSet <- SanityCheckData(mSet)
mSet <- RemoveMissingPercent(mSet, percent = 0.5)
mSet <- ImputeMissingVar(mSet, method = "exclude")
}, error = function(e) {
cat("Error occurred during data processing:", conditionMessage(e), "\n")
})
# Reset working directory
setwd(back_wd)
# Return MetaboDataMatrix
return(MetaboDataMatrix)
}
toMetaboAnalyst(filtered_experiment, class_col = 'sample_type')
library(targets)
tar_load(filtered_experiment)
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
MetaboAnalyst_load_data <- function() {
library(MetaboAnalystR)
# Save WD
back_wd <- getwd()
# Change working directory
setwd("Analysis")
# Initialize MetaboAnalyst data objects
mSet <- InitDataObjects("conc", "stat", FALSE)
# Read text data
mSet <- Read.TextData(mSet, "MetaboAnalystData.csv", "rowu", "disc")
# Print read message
print(mSet$msgSet$read.msg)
# Perform sanity check on data
tryCatch({
mSet <- SanityCheckData(mSet)
mSet <- RemoveMissingPercent(mSet, percent = 0.5)
mSet <- ImputeMissingVar(mSet, method = "exclude")
}, error = function(e) {
cat("Error occurred during data processing:", conditionMessage(e), "\n")
})
# Reset working directory
setwd(back_wd)
}
toMetaboAnalyst <- function(dataset_exp, class_col = "sample_type") {
# Extract data matrix
dataMatrix_extracted <- SummarizedExperiment::assay(dataset_exp)
sampleMetadata_extracted <- sample.data.extract(dataset_exp)
# Extract relevant information using dplyr
samples_name <- rownames(dataMatrix_extracted)
classes <- dplyr::pull(sampleMetadata_extracted, {{ class_col }})
# Create data frame for MetaboAnalyst
MetaboDataMatrix <- data.frame(Sample = samples_name,
Class = classes,
dataMatrix_extracted)
# Create a directory to save the processed data
dir.create("Analysis", showWarnings = FALSE)
# Save the data frame as a CSV file
write.csv(MetaboDataMatrix, file = "Analysis/MetaboAnalystData.csv", row.names = FALSE)
# Return MetaboDataMatrix
return(MetaboDataMatrix)
}
toMetaboAnalyst(filtered_experiment, class_col = 'sample_type')
MetaboAnalyst_load_data()
getwd()
setwd('Analysis')
getwd)
getwd()
mSet <- InitDataObjects("conc", "stat", FALSE)
mSet <- Read.TextData(mSet, "MetaboAnalystData.csv", "rowu", "disc")
print(mSet$msgSet$read.msg)
mSet <- SanityCheckData(mSet)
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
setwd("C:/Users/eduar/Desktop/TFM/Work")
toMetaboAnalyst(filtered_experiment, class_col = 'sample_type')
MetaboAnalyst_load_data()
MetaboAnalyst_load_data()
setwd("C:/Users/eduar/Desktop/TFM/Work")
MetaboAnalyst_load_data()
MetaboAnalyst_load_data <- function() {
library(MetaboAnalystR)
# Save WD
back_wd <- getwd()
# Change working directory
setwd("Analysis")
# Initialize MetaboAnalyst data objects
mSet <- InitDataObjects("conc", "stat", FALSE)
# Read text data
mSet <- Read.TextData(mSet, "MetaboAnalystData.csv", "rowu", "disc")
# Print read message
print(mSet$msgSet$read.msg)
# Perform sanity check on data
tryCatch({
mSet <- SanityCheckData(mSet)
mSet <- RemoveMissingPercent(mSet, percent = 0.5)
mSet <- ImputeMissingVar(mSet, method = "exclude")
}, error = function(e) {
cat("Error occurred during data processing:", conditionMessage(e), "\n")
})
# Reset working directory
setwd(back_wd)
}
setwd("C:/Users/eduar/Desktop/TFM/Work")
# Save WD
back_wd <- getwd()
# Change working directory
setwd("Analysis")
# Initialize MetaboAnalyst data objects
mSet <- InitDataObjects("conc", "stat", FALSE)
library(MetaboAnalystR)
# Initialize MetaboAnalyst data objects
mSet <- InitDataObjects("conc", "stat", FALSE)
# Read text data
mSet <- Read.TextData(mSet, "MetaboAnalystData.csv", "rowu", "disc")
# Print read message
print(mSet$msgSet$read.msg)
# Perform sanity check on data
tryCatch({
mSet <- SanityCheckData(mSet)
mSet <- RemoveMissingPercent(mSet, percent = 0.5)
mSet <- ImputeMissingVar(mSet, method = "exclude")
}, error = function(e) {
cat("Error occurred during data processing:", conditionMessage(e), "\n")
})
setwd("C:/Users/eduar/Desktop/TFM/Work")
library(MetaboAnalystR)
# Change working directory
setwd("Analysis")
# Initialize MetaboAnalyst data objects
mSet <- InitDataObjects("conc", "stat", FALSE)
# Read text data
mSet <- Read.TextData(mSet, "MetaboAnalystData.csv", "rowu", "disc")
# Print read message
print(mSet$msgSet$read.msg)
mSet <- SanityCheckData(mSet)
library(MetaboAnalystR)
setwd("C:/Users/eduar/Desktop/TFM/Work")
# Save WD
back_wd <- getwd()
# Change working directory
setwd("Analysis")
# Initialize MetaboAnalyst data objects
mSet <- InitDataObjects("conc", "stat", FALSE)
# Read text data
mSet <- Read.TextData(mSet, "MetaboAnalystData.csv", "rowu", "disc")
setwd("C:/Users/eduar/Desktop/TFM/Work")
library(MetaboAnalystR)
# Save WD
back_wd <- getwd()
# Change working directory
setwd("Analysis")
# Initialize MetaboAnalyst data objects
mSet <- InitDataObjects("conc", "stat", FALSE)
# Read text data
mSet <- Read.TextData(mSet, "MetaboAnalystData.csv", "rowu", "disc")
# Print read message
print(mSet$msgSet$read.msg)
mSet <- SanityCheckData(mSet)
# Perform sanity check on data
tryCatch({
mSet <- SanityCheckData(mSet)
mSet <- RemoveMissingPercent(mSet, percent = 0.5)
mSet <- ImputeMissingVar(mSet, method = "exclude")
}, error = function(e) {
cat("Error occurred during data processing:", conditionMessage(e), "\n")
})
tar_make()
targets::tar_make()
setwd("C:/Users/eduar/Desktop/TFM/Work")
targets::tar_make()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
targets::tar_make()
library(targets)
tar_load(dataMatrix)
tar_load(sampleMetadata)
tar_load(variableMetadata)
View(dataMatrix)
tar_make()
tar_make()
tar_make()
library(MetaboAnalystR)
tar_make()
tar_make()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_make()
tar_poll()
tar_progress_summary()
tar_progress()
tar_watch()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_make()
tar_make()
library(qs)
qs::qread('Analyst/data_proc.qs')
qs::qread('data_proc.qs')
qs::qread('Analysis/data_proc.qs')
test <- qs::qread('Analysis/data_proc.qs')
View(test)
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_make()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_make()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_make()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_make()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_make()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_make()\
tar_make()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
View(test)
View(variableMetadata)
View(sampleMetadata)
View(dataMatrix)
tar_make()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_make()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_make()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_make()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_make()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_make()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_make()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_make()
tar_make()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_make()
install.packages(c("texlive", "texlive-fonts-extra"))
install.packages("texlive")
install.packages("texlive")
library(texlive)
library(texlive)
tar_make()
source("C:/Users/eduar/Desktop/TFM/Work/R/utils.R")
tar_make()
