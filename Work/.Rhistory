install.packages("renv")
renv::init()
renv::status()
?renv::status()
renv::load()
renv::restore()
source("~/.active-rstudio-document")
use_targets()
library(targets)
renv::install("targets")
renv::install("crew")
renv::status()
renv::snapshot()
library(targets)
use_targets()
renv::install("usethis")
renv::snapshot()
use_targets()
tar_make()
tar_crew()
tar_visnetwork()
renv::install("visNetwork")
renv::snapshot()
tar_visnetwork()
tar_crew()
tar_make()
tar_crew()
install.packages("maplet")
devtools::install_github(repo="krumsieklab/maplet@v1.2.1", subdir="maplet")
install.packages("devtools")
devtools::install_github(repo="krumsieklab/maplet@v1.2.1", subdir="maplet")
renv::status()
renv::status()
renv::snapshot()
library(maplet)
library(SummarizedExperiment)
data(airway, package="airway")
install.packages("airway")
data(airway, package="airway")
se <- airway
se
assays(se)$counts
`install.packages(c("Rserve", "ptw", "gplots", "baseline", "hyperSpec", "ggplot2","boot"))
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
BiocManager::install(c("xcms", "CAMERA","PROcess"))`
install.packages(c("Rserve", "ptw", "gplots", "baseline", "hyperSpec", "ggplot2","boot"))
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
BiocManager::install(c("xcms", "CAMERA","PROcess"))
renv::snapshot(confirm = FALSE)
library(maplet)
library(tidyverse)
purrr::zap()
file_data <- system.file("extdata", "example_data/simulated_data.xlsx", package = "maplet")
D <-
# validate checksum
mt_load_checksum(file=file_data, checksum = "80afcd72481c6cf3dcf83342e3513699") %>%
# load data - this function loads the assay data only
#   alternative loading functions: mt_load_metabolon_v1(), mt_load_metabolon_v2(), mt_load_metabolon_lipidomics(),
#     mt_load_olink(), mt_load_ucd(), mt_load_wcm(), mt_load_nightingale, mt_load_metabolon_new_format()
mt_load_xls(file=file_data, sheet="data", samples_in_row=T, id_col="sample") %>%
# load metabolite (rowData) annotations
mt_anno_xls(file=file_data, sheet="metinfo",anno_type="features", anno_id_col="name", data_id_col = "name") %>%
# load clinical (colData) annotations
mt_anno_xls(file=file_data, sheet="clin", anno_type="samples", anno_id_col ="sample", data_id_col ="sample") %>%
# # log assay dimensions and number of columns for both metabolite and clincial annotations
mt_reporting_data() %>%
# start timing
mt_reporting_tic() %>%
{.}
?mt_load_checksum()
D <-
# validate checksum
mt_load_checksum(file=file_data) %>%
# load data - this function loads the assay data only
#   alternative loading functions: mt_load_metabolon_v1(), mt_load_metabolon_v2(), mt_load_metabolon_lipidomics(),
#     mt_load_olink(), mt_load_ucd(), mt_load_wcm(), mt_load_nightingale, mt_load_metabolon_new_format()
mt_load_xls(file=file_data, sheet="data", samples_in_row=T, id_col="sample") %>%
# load metabolite (rowData) annotations
mt_anno_xls(file=file_data, sheet="metinfo",anno_type="features", anno_id_col="name", data_id_col = "name") %>%
# load clinical (colData) annotations
mt_anno_xls(file=file_data, sheet="clin", anno_type="samples", anno_id_col ="sample", data_id_col ="sample") %>%
# # log assay dimensions and number of columns for both metabolite and clincial annotations
mt_reporting_data() %>%
# start timing
mt_reporting_tic() %>%
{.}
?maplet()
?maplet::mtt_equal()
D <-
# validate checksum
mt_load_checksum(file=file_data, checksum = "80afcd72481c6cf3dcf83342e3513699") %>%
# load data - this function loads the assay data only
#   alternative loading functions: mt_load_metabolon_v1(), mt_load_metabolon_v2(), mt_load_metabolon_lipidomics(),
#     mt_load_olink(), mt_load_ucd(), mt_load_wcm(), mt_load_nightingale, mt_load_metabolon_new_format()
mt_load_xls(file=file_data, sheet="data", samples_in_row=T, id_col="sample") %>%
# load metabolite (rowData) annotations
mt_anno_xls(file=file_data, sheet="metinfo",anno_type="features", anno_id_col="name", data_id_col = "name") %>%
# load clinical (colData) annotations
mt_anno_xls(file=file_data, sheet="clin", anno_type="samples", anno_id_col ="sample", data_id_col ="sample") %>%
# # log assay dimensions and number of columns for both metabolite and clincial annotations
mt_reporting_data() %>%
# start timing
mt_reporting_tic() %>%
{.}
D <- D %>%
# heading for html file
mt_reporting_heading(heading = "Preprocessing", lvl=1) %>%
# heading for html file
mt_reporting_heading(heading = "Filtering", lvl = 2) %>%
# section text
mt_reporting_text(text = "Plot percent missingness for each metabolite before filtering, filter out metabolites with >= 50%
missingness, plot percent missingness for each metabolite after filtering, add missingness annotation
columns to both metabolite and sample annotation data frames.") %>%
# plot missingness distribution
mt_plots_missingness(feat_max=0.5) %>%
# filter metabolites with more than 50% missing values per group
mt_pre_filter_missingness(feat_max = 0.5, group_col = "Diagnosis") %>%
# plot missingness distribution after filtering
mt_plots_missingness(feat_max=0.5) %>%
# add missingness percentage as annotation to samples (remaining missing)
mt_anno_missingness(anno_type = "samples", out_col = "missing") %>%
# add missingness percentage as annotation to metabolites
mt_anno_missingness(anno_type = "features", out_col = "missing") %>%
{.}
source("C:/Users/eduar/Desktop/TFM/Work/Training/maplet/Example_pipeline.R")
D <- D %>%
# heading
mt_reporting_heading(heading = "Data Clean-up", lvl = 1) %>%
# section text
mt_reporting_text(text = "Filter samples that are missing values for Diagnosis,add sample annotation column with log10 of
PreBioPSA, convert sample annotaiton column Diagnosis to factors,filter metabolites that are missing values
for SUB_PATHWAY, log dataset information for this point of the pipeline.") %>%
# filter samples
mt_modify_filter_samples(filter = !is.na(Diagnosis)) %>%
# create additional variable
mt_anno_mutate(anno_type = "samples", col_name = "PreBioPSALog", term = log10(PreBioPSA)) %>%
# modify variable to factor
mt_anno_apply(anno_type = "samples", col_name = "Diagnosis", fun = as.factor) %>%
# remove metabolites with no pathway annotation
mt_modify_filter_features(filter = !is.na(SUB_PATHWAY)) %>%
# log assay dimensions and number of columns for both metabolite and clinical annotations
mt_reporting_data() %>%
{.}
D <- D %>%
# heading for html file
mt_reporting_heading(heading = "Preprocessing", lvl=1) %>%
# heading for html file
mt_reporting_heading(heading = "Filtering", lvl = 2) %>%
# section text
mt_reporting_text(text = "Plot percent missingness for each metabolite before filtering, filter out metabolites with >= 50%
missingness, plot percent missingness for each metabolite after filtering, add missingness annotation
columns to both metabolite and sample annotation data frames.") %>%
# plot missingness distribution
mt_plots_missingness(feat_max=0.5) %>%
# filter metabolites with more than 50% missing values per group
mt_pre_filter_missingness(feat_max = 0.5, group_col = "Diagnosis") %>%
# plot missingness distribution after filtering
mt_plots_missingness(feat_max=0.5) %>%
# add missingness percentage as annotation to samples (remaining missing)
mt_anno_missingness(anno_type = "samples", out_col = "missing") %>%
# add missingness percentage as annotation to metabolites
mt_anno_missingness(anno_type = "features", out_col = "missing") %>%
{.}
D <- D %>%
# heading for html file
mt_reporting_heading(heading = "Normalization", lvl = 2) %>%
# section text
mt_reporting_text(text = "Plot sample boxplots before normalization, apply median batch correction, perform quotient
normalization, plot boxplot with dilution factors from quotient normalization, plot sample boxplot after
normalization, log transform the data, impute missing data using knn, plot sample boxplot after imputation,
detect outliers, log dataset info, write pre-processed data to file.") %>%
# plot sample boxplots
mt_plots_sample_boxplot(color=Diagnosis, title = "Original", plot_logged = T) %>%
# apply batch correction
#   alternative batch correction function: mt_pre_batch_combat
mt_pre_batch_median(batch_col = "BOX.NUMBER") %>%
# plot sample boxplots after batch correction
mt_plots_sample_boxplot(color=Diagnosis, title = "After batch correction", plot_logged = T) %>%
# normalize abundances using probabilistic quotient
#   alternative normalization function: mt_pre_norm_external
mt_pre_norm_quot(feat_max = 0.2, ref_samples = Diagnosis==0) %>%
# show dilution plot
mt_plots_dilution_factor(in_col="Diagnosis") %>%
# plot sample boxplots after normalization
mt_plots_sample_boxplot(color=Diagnosis, title = "After normalization", plot_logged = T) %>%
# log transform
#   other data transformation functions: mt_pre_trans_exp, mt_pre_trans_relative, mt_pre_trans_scale
mt_pre_trans_log() %>%
# impute missing values using knn
#   alternative imputation functions: mt_pre_impute_min
mt_pre_impute_knn() %>%
# plot sample boxplot after imputation
mt_plots_sample_boxplot(color=Diagnosis, title = "After imputation", plot_logged = T) %>%
# outlier detection (univariate)
#   alternative functions: mt_pre_outlier_detection_mahalanobis(), mt_pre_outlier_detection_leverage()
#   related function: mt_pre_outlier_to_na()
mt_pre_outlier_detection_univariate() %>%
# print infos about dataset
mt_reporting_data() %>%
# write preprocessed data to Excel file
#   other writing functions: mt_write_se_rds (save SummarizedExerpiment object)
mt_write_se_xls(file = "PreprocessedData.xlsx") %>%
{.}
D <- D %>%
# heading for html file
mt_reporting_heading(heading = "Normalization", lvl = 2) %>%
# section text
mt_reporting_text(text = "Plot sample boxplots before normalization, apply median batch correction, perform quotient
normalization, plot boxplot with dilution factors from quotient normalization, plot sample boxplot after
normalization, log transform the data, impute missing data using knn, plot sample boxplot after imputation,
detect outliers, log dataset info, write pre-processed data to file.") %>%
# plot sample boxplots
mt_plots_sample_boxplot(color=Diagnosis, title = "Original", plot_logged = T) %>%
# apply batch correction
#   alternative batch correction function: mt_pre_batch_combat
mt_pre_batch_median(batch_col = "BOX.NUMBER") %>%
# plot sample boxplots after batch correction
mt_plots_sample_boxplot(color=Diagnosis, title = "After batch correction", plot_logged = T) %>%
# normalize abundances using probabilistic quotient
#   alternative normalization function: mt_pre_norm_external
mt_pre_norm_quot(feat_max = 0.2, ref_samples = Diagnosis==0) %>%
# show dilution plot
mt_plots_dilution_factor(in_col="Diagnosis") %>%
# plot sample boxplots after normalization
mt_plots_sample_boxplot(color=Diagnosis, title = "After normalization", plot_logged = T) %>%
# log transform
#   other data transformation functions: mt_pre_trans_exp, mt_pre_trans_relative, mt_pre_trans_scale
mt_pre_trans_log() %>%
# impute missing values using knn
#   alternative imputation functions: mt_pre_impute_min
mt_pre_impute_knn() %>%
# plot sample boxplot after imputation
mt_plots_sample_boxplot(color=Diagnosis, title = "After imputation", plot_logged = T) %>%
# outlier detection (univariate)
#   alternative functions: mt_pre_outlier_detection_mahalanobis(), mt_pre_outlier_detection_leverage()
#   related function: mt_pre_outlier_to_na()
mt_pre_outlier_detection_univariate() %>%
# print infos about dataset
mt_reporting_data() %>%
# write preprocessed data to Excel file
#   other writing functions: mt_write_se_rds (save SummarizedExerpiment object)
mt_write_se_xls(file = "PreprocessedData.xlsx") %>%
{.}
library(maplet)
library(tidyverse)
purrr::zap()
file_data <- system.file("extdata", "example_data/simulated_data.xlsx", package = "maplet")
D <-
# validate checksum
mt_load_checksum(file=file_data, checksum = "80afcd72481c6cf3dcf83342e3513699") %>%
# load data - this function loads the assay data only
#   alternative loading functions: mt_load_metabolon_v1(), mt_load_metabolon_v2(), mt_load_metabolon_lipidomics(),
#     mt_load_olink(), mt_load_ucd(), mt_load_wcm(), mt_load_nightingale, mt_load_metabolon_new_format()
mt_load_xls(file=file_data, sheet="data", samples_in_row=T, id_col="sample") %>%
# load metabolite (rowData) annotations
mt_anno_xls(file=file_data, sheet="metinfo",anno_type="features", anno_id_col="name", data_id_col = "name") %>%
# load clinical (colData) annotations
mt_anno_xls(file=file_data, sheet="clin", anno_type="samples", anno_id_col ="sample", data_id_col ="sample") %>%
# # log assay dimensions and number of columns for both metabolite and clincial annotations
mt_reporting_data() %>%
# start timing
mt_reporting_tic() %>%
{.}
D <- D %>%
# heading
mt_reporting_heading(heading = "Data Clean-up", lvl = 1) %>%
# section text
mt_reporting_text(text = "Filter samples that are missing values for Diagnosis,add sample annotation column with log10 of
PreBioPSA, convert sample annotaiton column Diagnosis to factors,filter metabolites that are missing values
for SUB_PATHWAY, log dataset information for this point of the pipeline.") %>%
# filter samples
mt_modify_filter_samples(filter = !is.na(Diagnosis)) %>%
# create additional variable
mt_anno_mutate(anno_type = "samples", col_name = "PreBioPSALog", term = log10(PreBioPSA)) %>%
# modify variable to factor
mt_anno_apply(anno_type = "samples", col_name = "Diagnosis", fun = as.factor) %>%
# remove metabolites with no pathway annotation
mt_modify_filter_features(filter = !is.na(SUB_PATHWAY)) %>%
# log assay dimensions and number of columns for both metabolite and clinical annotations
mt_reporting_data() %>%
{.}
D <- D %>%
# heading for html file
mt_reporting_heading(heading = "Preprocessing", lvl=1) %>%
# heading for html file
mt_reporting_heading(heading = "Filtering", lvl = 2) %>%
# section text
mt_reporting_text(text = "Plot percent missingness for each metabolite before filtering, filter out metabolites with >= 50%
missingness, plot percent missingness for each metabolite after filtering, add missingness annotation
columns to both metabolite and sample annotation data frames.") %>%
# plot missingness distribution
mt_plots_missingness(feat_max=0.5) %>%
# filter metabolites with more than 50% missing values per group
mt_pre_filter_missingness(feat_max = 0.5, group_col = "Diagnosis") %>%
# plot missingness distribution after filtering
mt_plots_missingness(feat_max=0.5) %>%
# add missingness percentage as annotation to samples (remaining missing)
mt_anno_missingness(anno_type = "samples", out_col = "missing") %>%
# add missingness percentage as annotation to metabolites
mt_anno_missingness(anno_type = "features", out_col = "missing") %>%
{.}
D <- D %>%
# heading for html file
mt_reporting_heading(heading = "Normalization", lvl = 2) %>%
# section text
mt_reporting_text(text = "Plot sample boxplots before normalization, apply median batch correction, perform quotient
normalization, plot boxplot with dilution factors from quotient normalization, plot sample boxplot after
normalization, log transform the data, impute missing data using knn, plot sample boxplot after imputation,
detect outliers, log dataset info, write pre-processed data to file.") %>%
# plot sample boxplots
mt_plots_sample_boxplot(color=Diagnosis, title = "Original", plot_logged = T) %>%
# apply batch correction
#   alternative batch correction function: mt_pre_batch_combat
mt_pre_batch_median(batch_col = "BOX.NUMBER") %>%
# plot sample boxplots after batch correction
mt_plots_sample_boxplot(color=Diagnosis, title = "After batch correction", plot_logged = T) %>%
# normalize abundances using probabilistic quotient
#   alternative normalization function: mt_pre_norm_external
mt_pre_norm_quot(feat_max = 0.2, ref_samples = Diagnosis==0) %>%
# show dilution plot
mt_plots_dilution_factor(in_col="Diagnosis") %>%
# plot sample boxplots after normalization
mt_plots_sample_boxplot(color=Diagnosis, title = "After normalization", plot_logged = T) %>%
# log transform
#   other data transformation functions: mt_pre_trans_exp, mt_pre_trans_relative, mt_pre_trans_scale
mt_pre_trans_log() %>%
# impute missing values using knn
#   alternative imputation functions: mt_pre_impute_min
mt_pre_impute_knn() %>%
# plot sample boxplot after imputation
mt_plots_sample_boxplot(color=Diagnosis, title = "After imputation", plot_logged = T) %>%
# outlier detection (univariate)
#   alternative functions: mt_pre_outlier_detection_mahalanobis(), mt_pre_outlier_detection_leverage()
#   related function: mt_pre_outlier_to_na()
mt_pre_outlier_detection_univariate() %>%
# print infos about dataset
mt_reporting_data() %>%
# write preprocessed data to Excel file
#   other writing functions: mt_write_se_rds (save SummarizedExerpiment object)
mt_write_se_xls(file = "PreprocessedData.xlsx") %>%
{.}
D <- D %>%
# heading for html file
mt_reporting_heading(heading = "Get Pathway Annotations", lvl = 1) %>%
# get KEGG ids from HMDB ids
mt_anno_hmdb_to_kegg(in_col = "HMDb", out_col = "KEGG_ids") %>%
# get pathway annotations
#   alternative functions: mt_anno_pathways_xls, mt_anno_pathways_graphite, mt_anno_pathways_uniprot
mt_anno_pathways_hmdb(in_col = "HMDb", out_col = "pathway", pwdb_name = "KEGG") %>%
# remove redundant
mt_anno_pathways_remove_redundant(feat_col = "KEGG_ids", pw_col = "pathway") %>%
# write pathway annotations
mt_write_pathways(file="ExamplePipeline_PathwayAnnotations.xlsx", pw_col = "pathway") %>%
{.}
D <- D %>%
# heading for html file
mt_reporting_heading(heading = "Global Statistics", lvl = 1) %>%
# plot PCA
mt_plots_pca(scale_data = T, title = "scaled PCA - Diagnosis", color=Diagnosis, size=2.5, ggadd=scale_size_identity()) %>%
# plot UMAP
mt_plots_umap(scale_data = T, title = "scaled UMAP - Diagnosis", color=Diagnosis, size=2.5, ggadd=scale_size_identity()) %>%
# plot heatmap
mt_plots_heatmap(scale_data = T, annotation_col = c("Diagnosis"), annotation_row = c("SUPER_PATHWAY"),
clustering_method = "ward.D2", fontsize = 5, cutree_rows = 3, cutree_cols = 3, color=gplots::bluered(101)) %>%
{.}
# install structToolbox and dependencies
BiocManager::install("structToolbox")
install.packages("pmp")
install.packages("ropls")
install.packages("BiocFileCache")
install.packages("gridExtra")
install.packages("cowplot")
install.packages("openxlsx")
renv::snapshot()
?renv::dependencies
renv::dependencies()
