ggplot() +
geom_point(aes(x = obs, y = T2, fill = T2), shape = 21, size = 3, color = "black") +
geom_segment(aes(x = obs, y = T2, xend = obs, yend = 0), size = .5) +
scale_fill_gradient(low = "black", high = "red", guide = "none") +
geom_hline(yintercept = pluck(res_PCs, "cutoff.99pct"), linetype = "dashed", color = "darkred", size = .5) +
geom_hline(yintercept = pluck(res_PCs, "cutoff.95pct"), linetype = "dashed", color = "darkblue", size = .5) +
annotate("text", x = 80, y = 13, label = "99% limit", color = "darkred") +
annotate("text", x = 80, y = 9, label = "95% limit", color = "darkblue") +
labs(x = "Observations", y = paste0("Hotelling’s T-squared (", nPCs_to_plot, "PCs)"),
fill = "T2 stats", caption = "Hotelling’s T-squared vs. Observations") +
theme_bw() + theme(panel.grid = element_blank())
}
plot_hotelling_pca(filtered, 5)
# Function to plot Hotelling's T-squared vs. Observations
plot_hotelling_obs <- function(dataset_experiment, nPCs=5, nPCs_to_plot = 2) {
# Perform PCA
M <- structToolbox::knn_impute() + structToolbox::mean_centre() + structToolbox::PCA(number_components = nPCs)
M <- structToolbox::model_apply(M, dataset_experiment)
# Extract pca_scores
pca_scores <- M[3]$scores$data %>% as_tibble()
# Calculate Hotelling's T2 ellipse params
res_PCs <- ellipseParam(data = pca_scores, k = nPCs_to_plot)
# Plot
plt <- tibble(
T2 = purrr::pluck(res_PCs, "Tsquare", "value"),
obs = rownames(pca_scores)
) %>%
ggplot() +
geom_point(aes(x = obs, y = T2, fill = T2), shape = 21, size = 3, color = "black") +
geom_segment(aes(x = obs, y = T2, xend = obs, yend = 0), size = .5) +
scale_fill_gradient(low = "black", high = "red", guide = "none") +
geom_hline(yintercept = pluck(res_PCs, "cutoff.99pct"), linetype = "dashed", color = "darkred", size = .5) +
geom_hline(yintercept = pluck(res_PCs, "cutoff.95pct"), linetype = "dashed", color = "darkblue", size = .5) +
annotate("text", x = 80, y = 13, label = "99% limit", color = "darkred") +
annotate("text", x = 80, y = 9, label = "95% limit", color = "darkblue") +
labs(x = "Observations", y = paste0("Hotelling’s T-squared (", nPCs_to_plot, "PCs)"),
fill = "T2 stats", caption = "Hotelling’s T-squared vs. Observations") +
theme_bw() + theme(panel.grid = element_blank())
print(plt)
return(plt)
}
plot_hotelling_obs(filtered, 5)
# Function to plot Hotelling's T-squared vs. Observations
plot_hotelling_obs <- function(dataset_experiment, nPCs=5, nPCs_to_plot = 2) {
# Perform PCA
M <- structToolbox::knn_impute() + structToolbox::mean_centre() + structToolbox::PCA(number_components = nPCs)
M <- structToolbox::model_apply(M, dataset_experiment)
# Extract pca_scores
pca_scores <- M[3]$scores$data %>% as_tibble()
# Calculate Hotelling's T2 ellipse params
res_PCs <- ellipseParam(data = pca_scores, k = nPCs_to_plot)
# Plot
plt <- tibble(
T2 = purrr::pluck(res_PCs, "Tsquare", "value"),
obs = rownames(pca_scores)
) %>%
ggplot() +
geom_point(aes(x = obs, y = T2, fill = T2), shape = 21, size = 3, color = "black") +
geom_segment(aes(x = obs, y = T2, xend = obs, yend = 0), size = .5) +
scale_fill_gradient(low = "black", high = "red", guide = "none") +
geom_hline(yintercept = pluck(res_PCs, "cutoff.99pct"), linetype = "dashed", color = "darkred", size = .5) +
geom_hline(yintercept = pluck(res_PCs, "cutoff.95pct"), linetype = "dashed", color = "darkblue", size = .5) +
annotate("text", x = 80, y = 13, label = "99% limit", color = "darkred") +
annotate("text", x = 80, y = 9, label = "95% limit", color = "darkblue") +
labs(x = "Observations", y = paste0("Hotelling’s T-squared (", nPCs_to_plot, "PCs)"),
fill = "T2 stats", caption = "Hotelling’s T-squared vs. Observations") +
theme_bw() + theme(panel.grid = element_blank(), axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
print(plt)
return(plt)
}
plot_hotelling_obs(filtered, 5)
# Plot
plt <- tibble(
T2 = purrr::pluck(res_PCs, "Tsquare", "value"),
obs = rownames(pca_scores)
) %>%
ggplot() +
geom_point(aes(x = obs, y = T2, fill = T2), shape = 21, size = 3, color = "black") +
geom_segment(aes(x = obs, y = T2, xend = obs, yend = 0), size = .5) +
scale_fill_gradient(low = "black", high = "red", guide = "none") +
geom_hline(yintercept = pluck(res_PCs, "cutoff.99pct"), linetype = "dashed", color = "darkred", size = .5) +
geom_hline(yintercept = pluck(res_PCs, "cutoff.95pct"), linetype = "dashed", color = "darkblue", size = .5) +
annotate("text", x = 80, y = 13, label = "99% limit", color = "darkred") +
annotate("text", x = 80, y = 9, label = "95% limit", color = "darkblue") +
labs(x = "Observations", y = paste0("Hotelling’s T-squared (", nPCs_to_plot, "PCs)"),
fill = "T2 stats", caption = "Hotelling’s T-squared vs. Observations") +
theme_bw() + theme(panel.grid = element_blank(), axis.text.x = element_text(angle = 90))
# Function to plot Hotelling's T-squared vs. Observations
plot_hotelling_obs <- function(dataset_experiment, nPCs=5, nPCs_to_plot = 2) {
# Perform PCA
M <- structToolbox::knn_impute() + structToolbox::mean_centre() + structToolbox::PCA(number_components = nPCs)
M <- structToolbox::model_apply(M, dataset_experiment)
# Extract pca_scores
pca_scores <- M[3]$scores$data %>% as_tibble()
# Calculate Hotelling's T2 ellipse params
res_PCs <- ellipseParam(data = pca_scores, k = nPCs_to_plot)
# Plot
plt <- tibble(
T2 = purrr::pluck(res_PCs, "Tsquare", "value"),
obs = rownames(pca_scores)
) %>%
ggplot() +
geom_point(aes(x = obs, y = T2, fill = T2), shape = 21, size = 3, color = "black") +
geom_segment(aes(x = obs, y = T2, xend = obs, yend = 0), size = .5) +
scale_fill_gradient(low = "black", high = "red", guide = "none") +
geom_hline(yintercept = pluck(res_PCs, "cutoff.99pct"), linetype = "dashed", color = "darkred", size = .5) +
geom_hline(yintercept = pluck(res_PCs, "cutoff.95pct"), linetype = "dashed", color = "darkblue", size = .5) +
annotate("text", x = 80, y = 13, label = "99% limit", color = "darkred") +
annotate("text", x = 80, y = 9, label = "95% limit", color = "darkblue") +
labs(x = "Observations", y = paste0("Hotelling’s T-squared (", nPCs_to_plot, "PCs)"),
fill = "T2 stats", caption = "Hotelling’s T-squared vs. Observations") +
theme_bw() + theme(panel.grid = element_blank(), axis.text.x = element_text(angle = 90))
print(plt)
return(plt)
}
plot_hotelling_obs(filtered, 5)
# Function to plot Hotelling's T-squared vs. Observations
plot_hotelling_obs <- function(dataset_experiment, nPCs=5, nPCs_to_plot = 2) {
# Perform PCA
M <- structToolbox::knn_impute() + structToolbox::mean_centre() + structToolbox::PCA(number_components = nPCs)
M <- structToolbox::model_apply(M, dataset_experiment)
# Extract pca_scores
pca_scores <- M[3]$scores$data %>% as_tibble()
# Calculate Hotelling's T2 ellipse params
res_PCs <- ellipseParam(data = pca_scores, k = nPCs_to_plot)
# Plot
plt <- tibble(
T2 = purrr::pluck(res_PCs, "Tsquare", "value"),
obs = rownames(pca_scores)
) %>%
ggplot() +
geom_point(aes(x = obs, y = T2, fill = T2), shape = 21, size = 3, color = "black") +
geom_segment(aes(x = obs, y = T2, xend = obs, yend = 0), size = .5) +
scale_fill_gradient(low = "black", high = "red", guide = "none") +
geom_hline(yintercept = pluck(res_PCs, "cutoff.99pct"), linetype = "dashed", color = "darkred", size = .5) +
geom_hline(yintercept = pluck(res_PCs, "cutoff.95pct"), linetype = "dashed", color = "darkblue", size = .5) +
annotate("text", x = 80, y = 13, label = "99% limit", color = "darkred") +
annotate("text", x = 80, y = 9, label = "95% limit", color = "darkblue") +
labs(x = "Observations", y = paste0("Hotelling’s T-squared (", nPCs_to_plot, "PCs)"),
fill = "T2 stats", caption = "Hotelling’s T-squared vs. Observations") +
theme_bw() + theme(panel.grid = element_blank(), axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
print(plt)
return(plt)
}
# Function to plot Hotelling's T-squared vs. Observations
plot_hotelling_obs <- function(dataset_experiment, nPCs=5, nPCs_to_plot = 2) {
# Perform PCA
M <- structToolbox::knn_impute() + structToolbox::mean_centre() + structToolbox::PCA(number_components = nPCs)
M <- structToolbox::model_apply(M, dataset_experiment)
# Extract pca_scores
pca_scores <- M[3]$scores$data %>% as_tibble()
# Calculate Hotelling's T2 ellipse params
res_PCs <- ellipseParam(data = pca_scores, k = nPCs_to_plot)
# Plot
plt <- tibble(
T2 = purrr::pluck(res_PCs, "Tsquare", "value"),
obs = rownames(pca_scores)
) %>%
ggplot() +
geom_point(aes(x = obs, y = T2, fill = T2), shape = 21, size = 3, color = "black") +
geom_segment(aes(x = obs, y = T2, xend = obs, yend = 0), size = .5) +
scale_fill_gradient(low = "black", high = "red", guide = "none") +
geom_hline(yintercept = pluck(res_PCs, "cutoff.99pct"), linetype = "dashed", color = "darkred", size = .5) +
geom_hline(yintercept = pluck(res_PCs, "cutoff.95pct"), linetype = "dashed", color = "darkblue", size = .5) +
annotate("text", x = 80, y = 13, label = "99% limit", color = "darkred") +
annotate("text", x = 80, y = 9, label = "95% limit", color = "darkblue") +
labs(x = "Observations", y = paste0("Hotelling’s T-squared (", nPCs_to_plot, "PCs)"),
fill = "T2 stats", caption = "Hotelling’s T-squared vs. Observations") +
theme_bw() + theme(panel.grid = element_blank(), axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
print(plt)
return(plt)
}
plot_hotelling_obs(filtered, 5)
lintr:::addin_lint()
styler:::style_active_file()
tar_make()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::set_style_transformers()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
tar_make()
tar_manifest()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
library(targets)
tar_make9
tar_make()
tar_make()
tar_make()
tar_manifest()
tar_glimpse()
tar_manifest()
tar_manifest()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_destroy()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
tar_make()
# #### GLOBAL VARIABLES ####
out_dir <- "Out"
normalizePath(out_dir)
file_path_as_absolute(out_dir)
library(tools)
file_path_as_absolute(out_dir)
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_manifest()
tar_destroy()
tar_make()
tar_make()
tar_destroy()
tar_make()
tar_make()
tar_load(experiment)
VIM::aggr(SummarizedExperiment::assay(esperiment))
VIM::aggr(SummarizedExperiment::assay(experiment))
a <- VIM::aggr(SummarizedExperiment::assay(experiment))
a
plot(a)
plot(a)
print(a)
# Function to plot Hotelling's T-squared vs. Observations
plot_hotelling_obs <- function(dataset_experiment, nPCs = 5, nPCs_to_plot = 2){#, out_dir, out_name) {
# Perform PCA
M <- structToolbox::knn_impute() + structToolbox::mean_centre() + structToolbox::PCA(number_components = nPCs)
M <- structToolbox::model_apply(M, dataset_experiment)
# Extract pca_scores
pca_scores <- M[3]$scores$data %>% as_tibble()
# Calculate Hotelling's T2 ellipse params
res_PCs <- ellipseParam(data = pca_scores, k = nPCs_to_plot)
# Plot
plt <- tibble(
T2 = purrr::pluck(res_PCs, "Tsquare", "value"),
obs = rownames(pca_scores)
) %>%
ggplot() +
geom_point(aes(x = obs, y = T2, fill = T2), shape = 21, size = 3, color = "black") +
geom_segment(aes(x = obs, y = T2, xend = obs, yend = 0), size = .5) +
scale_fill_gradient(low = "black", high = "red", guide = "none") +
geom_hline(yintercept = pluck(res_PCs, "cutoff.99pct"), linetype = "dashed", color = "darkred", size = .5) +
geom_hline(yintercept = pluck(res_PCs, "cutoff.95pct"), linetype = "dashed", color = "darkblue", size = .5) +
annotate("text", x = 80, y = 13, label = "99% limit", color = "darkred") +
annotate("text", x = 80, y = 9, label = "95% limit", color = "darkblue") +
labs(
x = "Observations", y = paste0("Hotelling’s T-squared (", nPCs_to_plot, "PCs)"),
fill = "T2 stats", caption = "Hotelling’s T-squared vs. Observations"
) +
theme_bw() +
theme(panel.grid = element_blank(), axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
# save_plot(plt, out_dir, out_name)
return(plt)
}
plot_hotelling_obs(experiment)
library(tidyverse)
plot_hotelling_obs(experiment)
library(ggforce)
library(HotellingEllipse)
plot_hotelling_obs(experiment)
a <- plot_hotelling_obs(experiment)
print(a)
tar_destroy()
tar_make()
tar_destroy()
tar_make()
tar_destroy()
tar_make()
tar_destroy()
tar_make()
tar_make()
tar_make()
out_dir <- tools::file_path_as_absolute(out_dir)
withr::with_dir(out_dir, unlink("TempData",recursive=TRUE))
tar_make()
tar_make()
# Function to plot Hotelling's T-squared vs. Observations
plot_hotelling_obs <- function(dataset_experiment, nPCs = 5, nPCs_to_plot = 2) {
# Perform PCA
M <- structToolbox::knn_impute() + structToolbox::mean_centre() + structToolbox::PCA(number_components = nPCs)
M <- structToolbox::model_apply(M, dataset_experiment)
# Extract pca_scores
pca_scores <- M[3]$scores$data %>% as_tibble()
# Calculate Hotelling's T2 ellipse params
res_PCs <- ellipseParam(data = pca_scores, k = nPCs_to_plot)
# Plot
plt <- tibble(
T2 = purrr::pluck(res_PCs, "Tsquare", "value"),
obs = rownames(pca_scores)
) %>%
ggplot() +
geom_point(aes(x = obs, y = T2, fill = T2), shape = 21, size = 3, color = "black") +
geom_segment(aes(x = obs, y = T2, xend = obs, yend = 0), size = .5) +
scale_fill_gradient(low = "black", high = "red", guide = "none") +
geom_hline(yintercept = pluck(res_PCs, "cutoff.99pct"), linetype = "dashed", color = "darkred", size = .5) +
geom_hline(yintercept = pluck(res_PCs, "cutoff.95pct"), linetype = "dashed", color = "darkblue", size = .5) +
annotate("text", x = 80, y = 13, label = "99% limit", color = "darkred") +
annotate("text", x = 80, y = 9, label = "95% limit", color = "darkblue") +
labs(
x = "Observations", y = paste0("Hotelling’s T-squared (", nPCs_to_plot, "PCs)"),
fill = "T2 stats", caption = "Hotelling’s T-squared vs. Observations"
) +
theme_bw() +
theme(panel.grid = element_blank(), axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
return(plt)
}
plot_hotelling_pca <- function(dataset_experiment, nPCs = 5) {
# Perform PCA
M <- structToolbox::knn_impute() + structToolbox::mean_centre() + structToolbox::PCA(number_components = nPCs)
M <- structToolbox::model_apply(M, dataset_experiment)
# Extract pca_scores
pca_scores <- M[3]$scores$data %>% as_tibble()
# Calculate Hotelling's T2 ellipse params
res_PCs <- HotellingEllipse::ellipseParam(data = pca_scores, k = 2, pcx = 1, pcy = 2)
# Extract Hotelling's T2 values
T2 <- purrr::pluck(res_PCs, "Tsquare", "value")
# # Extract ellipse params for plotting
a99 <- purrr::pluck(res_PCs, "Ellipse", "a.99pct")
b99 <- purrr::pluck(res_PCs, "Ellipse", "b.99pct")
a95 <- purrr::pluck(res_PCs, "Ellipse", "a.95pct")
b95 <- purrr::pluck(res_PCs, "Ellipse", "b.95pct")
# Plot PCA scores
plt <- pca_scores %>%
ggplot(aes(x = PC1, y = PC2)) +
geom_ellipse(aes(x0 = 0, y0 = 0, a = a99, b = b99, angle = 0), size = .5, linetype = "dotted", fill = "white") +
geom_ellipse(aes(x0 = 0, y0 = 0, a = a95, b = b95, angle = 0), size = .5, linetype = "dashed", fill = "white") +
geom_point(aes(fill = T2), shape = 21, size = 3, color = "black") +
scale_fill_viridis_c(option = "viridis") +
geom_hline(yintercept = 0, linetype = "solid", color = "black", size = .1) +
geom_vline(xintercept = 0, linetype = "solid", color = "black", size = .1) +
labs(
title = "Scatterplot of PCA scores", subtitle = "PC1 vs. PC2", x = "PC1", y = "PC2",
fill = "T2", caption = "Hotelling's T2 ellipse with 99(exterior line) and 95(interior line) confidence intervals"
) +
theme_bw() +
theme(panel.grid = element_blank())
return(plt)
}
plt1 <- plot_hotelling_pca(dataset_experiment, nPCs = 5)
plt1 <- plot_hotelling_pca(experiment, nPCs = 5)
plt2 <- plot_hotelling_obs(experiment, nPCs = 5, nPCs_to_plot = 2)
plt1+plt2
library(gridExtra)
library(cowplot)
plt <- cowplot::plot_grid(plt1, plt2, nrow = 2)
plt
plt <- cowplot::plot_grid(plt1, plt2, ncol = 2)
plt
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
renv::statue
renv::status
renv::status()
renv::snapshot()
library(targets)
tar_destroy
tar_destroy()
tar_manifest
tar_manifest()
tar_visnetwork(targets_only=TRUE)
tar_make()
tar_meta(fields = warnings, complete_only = TRUE)
tar_meta(fields = warnings, complete_only = TRUE)
tar_destroy()
tar_visnetwork()
tar_make()
tar_meta(fields = warnings, complete_only = TRUE)
tar_visnetwork(targets_only=TRUE)
tar_destroy()
tar_make()
tar_make()
tar_load(headDataMatrix)
View(headDataMatrix)
View(t(headDataMatrix))
tar_make()
tar_make()
tar_make()
tar_make()
tar_load(headDataMatrix)
test <- headDataMatrix
t(test) %>% select(V1)
library(dplyr)
t(test) %>% select(V1)
filter(V1)
t(test) %>% filter(V1)
t(test)
t(test) %>% as_tibble()
test2 <- t(test) %>% as_tibble()
View(test)
View(test)
View(test2)
test2 %>% select(V1)
tar_make()
tar_make()
tar_meta(fields = warnings, complete_only = TRUE) \
tar_meta(fields = warnings, complete_only = TRUE)
tar_make()
tar_make()
tar_destroy()
library(targets)
tar_manifest()
tar_make()
tar_visnetwork()
tar_visnetwork(targets_only = TRUE)
tar_visnetwork()
vignette("rd")
devtools:::document()
roxygen2::roxygenise()
use_description()
usethis::use_description()
use_gpl3_license()
usethis::use_gpl3_license()
usethis::use_gpl3_license()
library(roxygen2)
roxygen2::roxygenise()
pkgload::dev_help('warper_createExperiment')
library(MetaboAnalystR)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
pkgload::dev_help('sort_by_sample_id')
roxygen2::roxygenise()
roxygen2::roxygenise()
pkgload::dev_help('normalize_metab')
roxygen2::roxygenise()
vignette("rd-other")
vignette("rd")
vignette("rd-formatting")
vignette("reuse")
roxygen2::roxygenise()
pkgload::dev_help('normalize')
roxygen2::roxygenise()
roxygen2::roxygenise()
pkgload::dev_help('normalize')
vignette("reuse")
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
pkgload::dev_help('warper_createExperiment')
roxygen2::roxygenise()
roxygen2::roxygenise()
usethis::use_vignette("my-vignette")
BiocManager::install("BiocStyle")
devtools::install_github("https://github.com/eperezme/metaboPipe/tree/Package")
renv::status()
renv::snapshot()
library(metaboPipe)
library(metaboPipe)
use_package("structToolbox", type = "Imports", min_version = NULL)
usethis::use_package("structToolbox", type = "Imports", min_version = NULL)
install.packages("usethis")
usethis::use_package("structToolbox", type = "Imports", min_version = NULL)
usethis::use_package("structToolbox", type = "Imports", min_version = NULL)
usethis::use_package("structToolbox", type = "Imports", min_version = NULL)
usethis::use_package("structToolbox", type = "Imports", min_version = NULL)
usethis::use_package("SummarizedExperiment", type = "Imports", min_version = NULL)
usethis::use_package("VIM", type = "Imports", min_version = NULL)
usethis::use_package("impute", type = "Imports", min_version = NULL)
usethis::use_package("imputeLCMD", type = "Imports", min_version = NULL)
usethis::use_package("missForest", type = "Imports", min_version = NULL)
usethis::use_package("caret", type = "Imports", min_version = NULL)
usethis::use_package("pcaMethods", type = "Imports", min_version = NULL)
devtools::
install.packages("devtools")
devtools::install_github("https://github.com/eperezme/metaboPipe/tree/dev/Work")
devtools::install_github("https://github.com/eperezme/metaboPipe/Work", ref = "dev")
devtools::install_github("https://github.com/eperezme/metaboPipe", ref = "dev", subdir = "Work")
detach("package:metaboPipe", unload = TRUE)
# Clone the MetaboPipe repository
# Install the package
devtools::install_github("https://github.com/eperezme/metaboPipe", ref = "dev", subdir = "Work")
remove.packages("metaboPipe")
# Clone the MetaboPipe repository
# Install the package
devtools::install_github("https://github.com/eperezme/metaboPipe", ref = "dev", subdir = "Work")
library(metaboPipe)
detach("package:metaboPipe", unload = TRUE)
library(targets)
tar_destroy()
tar_make()
shiny::runApp('Test')
# Install the package
devtools::install_github("https://github.com/eperezme/metaboPipe", ref = "dev", subdir = "Work")
renv::restore()
renv::restore()
