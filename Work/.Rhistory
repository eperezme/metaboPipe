rownames(data_neg) <- seq_len(nrow(data_neg))
# Create DatasetExperiment
DE <- DatasetExperiment(data = as.data.frame(data_neg),
sample_meta = sampleMetadata,
variable_meta = metaboliteMetadata,
name = 'Test',
description = 'Description test')
return(DE)
}
# Test function
test <- generate_experiment(data_neg, sampledata, metabolitedata)
attributes(sacurine$dataMatrix)
attributes(sacurine$dataMatrix)[1]
attributes(sacurine$dataMatrix)[2]
attributes(sacurine$dataMatrix)[3]
rownames(metabolitedata)
metabolitedata$annotation <- rownames(metabolitedata)
?seq_len
# Assign row names directly to data frames
data_neg
View(data_neg)
View(metabolitedata)
View(sampledata)
# Load data
data_pos <- read.csv("Training/Data/data_pos.csv", sep = ";", row.names = 1, header = TRUE, dec = ",")
data_neg <- read.csv("Training/Data/data_neg.csv", sep = ";", row.names = 1, header = TRUE, dec = ",")
data
# Load annotations
sampledata <- read.csv("Training/Data/sampleMetadata.csv", sep = ";", row.names = 1, header = TRUE, dec = ",")
metabolitedata <- read.csv("Training/Data/metabolitedata.csv", sep = ";", row.names = 1, header = TRUE, dec = ",")
View(data_neg)
View(metabolitedata)
View(sacurine)
View(sampledata)
data_neg <- as.matrix(data_neg)
typeof(data_neg)
View(data_neg)
temp$data_neg <- data_neg
View(sacurine$sampleMetadata)
View(sacurine$variableMetadata)
generate_experiment <- function(dataMatrix, sampleMetadata, metaboliteMetadata) {
metaboliteMetadata$annotation <- rownames(metaboliteMetadata)
variableMetadata$annotation=rownames(variableMetadata)
rownames(variableMetadata)=1:nrow(variableMetadata)
colnames(dataMatrix)=1:ncol(dataMatrix)
# Create DatasetExperiment
DE <- DatasetExperiment(data = as.data.frame(dataMatrix),
sample_meta = sampleMetadata,
variable_meta = metaboliteMetadata,
name = 'Test',
description = 'Description test')
return(DE)
}
# Test function
test <- generate_experiment(data_neg, sampledata, metabolitedata)
generate_experiment <- function(dataMatrix, sampleMetadata, metaboliteMetadata) {
metaboliteMetadata$annotation <- rownames(metaboliteMetadata)
metaboliteMetadata$annotation=rownames(metaboliteMetadata)
rownames(metaboliteMetadata)=1:nrow(metaboliteMetadata)
colnames(dataMatrix)=1:ncol(dataMatrix)
# Create DatasetExperiment
DE <- DatasetExperiment(data = as.data.frame(dataMatrix),
sample_meta = sampleMetadata,
variable_meta = metaboliteMetadata,
name = 'Test',
description = 'Description test')
return(DE)
}
# Test function
test <- generate_experiment(data_neg, sampledata, metabolitedata)
# Test function
test <- generate_experiment(data_neg, sampledata, metabolitedata)
# Test function
test <- generate_experiment(data_neg, sampledata, metabolitedata)
# Test function
test <- generate_experiment(data_neg, sampledata, metabolitedata)
?DatasetExperiment
metaboliteMetadata <-metabolitedata
metaboliteMetadata$annotation <- rownames(metaboliteMetadata)
metaboliteMetadata$annotation=rownames(metaboliteMetadata)
rownames(metaboliteMetadata)=1:nrow(metaboliteMetadata)
dataMatrix <-data_neg
colnames(dataMatrix)=1:ncol(dataMatrix)
# Create DatasetExperiment
DE <- DatasetExperiment(data = as.data.frame(dataMatrix),
sample_meta = sampleMetadata,
variable_meta = metaboliteMetadata,
name = 'Test')
metabolitedata <- read.csv("Training/Data/metabolitedata.csv", sep = ";", row.names = 1, header = TRUE, dec = ",")
View(metabolitedata)
metabolitedata <- read.csv("Training/Data/metabolitedata.csv", sep = ",", row.names = 1, header = TRUE)
View(metabolitedata)
generate_experiment <- function(dataMatrix, sampleMetadata, metaboliteMetadata) {
metaboliteMetadata$annotation <- rownames(metaboliteMetadata)
metaboliteMetadata$annotation=rownames(metaboliteMetadata)
rownames(metaboliteMetadata)=1:nrow(metaboliteMetadata)
colnames(dataMatrix)=1:ncol(dataMatrix)
# Create DatasetExperiment
DE <- DatasetExperiment(data = as.data.frame(dataMatrix),
sample_meta = sampleMetadata,
variable_meta = metaboliteMetadata,
name = 'Test')
return(DE)
}
# Test function
test <- generate_experiment(data_neg, sampledata, metabolitedata)
data('sacurine',package = 'ropls')
data <- sacurine$dataMatrix
View(data)
sacSample <- sacurine$sampleMetadata
sacMeta <- sacurine$variableMetadata
View(sacMeta)
data('sacurine',package = 'ropls')
sacurine$variableMetadata$annotation=rownames(sacurine$variableMetadata)
rownames(sacurine$variableMetadata)=1:nrow(sacurine$variableMetadata)
colnames(sacurine$dataMatrix)=1:ncol(sacurine$dataMatrix)
data <- sacurine$dataMatrix
sacSample <- sacurine$sampleMetadata
sacMeta <- sacurine$variableMetadata
file <- "Training/Data/pr5b00354_si_002.xls"
data_neg <- read.csv("Training/Data/data_neg.csv", sep = ";", row.names = 1, header = TRUE, dec = ",")
# Create DatasetExperiment
DE <- DatasetExperiment(data = data_neg,
sample_meta = sampleMetadata,
variable_meta = metaboliteMetadata,
name = 'Test')
# Load annotations
sampledata <- read.csv("Training/Data/sampleMetadata.csv", sep = ";", row.names = 1, header = TRUE, dec = ",")
metabolitedata <- read.csv("Training/Data/metabolitedata.csv", sep = ",", row.names = 1, header = TRUE)
generate_experiment <- function(dataMatrix, sampleMetadata, metaboliteMetadata) {
metaboliteMetadata$annotation <- rownames(metaboliteMetadata)
metaboliteMetadata$annotation=rownames(metaboliteMetadata)
rownames(metaboliteMetadata)=1:nrow(metaboliteMetadata)
colnames(dataMatrix)=1:ncol(dataMatrix)
# Create DatasetExperiment
DE <- DatasetExperiment(data = data_neg,
sample_meta = sampleMetadata,
variable_meta = metaboliteMetadata,
name = 'Test')
return(DE)
}
# Test function
test <- generate_experiment(data_neg, sampledata, metabolitedata)
data_neg <- read.csv("Training/Data/data_neg.csv", sep = ";", row.names = 1, header = TRUE, dec = ",")
# Load annotations
sampledata <- read.csv("Training/Data/sampleMetadata.csv", sep = ";", row.names = 1, header = TRUE, dec = ",")
metabolitedata <- read.csv("Training/Data/metabolitedata.csv", sep = ",", row.names = 1, header = TRUE)
View(metabolitedata)
View(sacMeta)
metabolitedata$annotation <- rownames(metabolitedata)
View(sacMeta)
View(metabolitedata)
rownames(metabolitedata)=1:nrow(metabolitedata)
data('sacurine',package = 'ropls')
sacurine$variableMetadata$annotation=rownames(sacurine$variableMetadata)
rownames(sacurine$variableMetadata)=1:nrow(sacurine$variableMetadata)
colnames(sacurine$dataMatrix)=1:ncol(sacurine$dataMatrix)
data <- sacurine$dataMatrix
sacSample <- sacurine$sampleMetadata
sacMeta <- sacurine$variableMetadata
View(sacSample)
View(sampledata)
View(sacurine)
View(sacSample)
# Define function to create DatasetExperiment object
createMetabolomicsDataset <- function(dataMatrix_file, sampleMetadata_file, metaboliteMetadata_file) {
# Read CSV files
dataMatrix <- read.csv(dataMatrix_file, header = TRUE, row.names = 1)
sampleMetadata <- read.csv(sampleMetadata_file, header = TRUE, row.names = 1)
metaboliteMetadata <- read.csv(metaboliteMetadata_file, header = TRUE, row.names = 1)
# Create DatasetExperiment object
dataset_exp <- DatasetExperiment(
data = dataMatrix,
sample_metadata = sampleMetadata,
metabolite_metadata = metaboliteMetadata
)
return(dataset_exp)
}
# Specify file paths
dataMatrix_file <- "Training/Data/data_neg.csv"
sampleMetadata_file <- "Training/Data/sampleMetadata.csv"
metaboliteMetadata_file <- "Training/Data/metabolitedata.csv"
# Create the DatasetExperiment object
metabolomics_dataset <- createMetabolomicsDataset(dataMatrix_file, sampleMetadata_file, metaboliteMetadata_file)
data_neg <- read.csv("Training/Data/data_neg.csv", sep = ";", row.names = 1, header = TRUE, dec = ",")
# Load annotations
sampledata <- read.csv("Training/Data/sampleMetadata.csv", sep = ";", row.names = 1, header = TRUE, dec = ",")
metabolitedata <- read.csv("Training/Data/metabolitedata.csv", sep = ",", row.names = 1, header = TRUE)
# Create DatasetExperiment
DE <- DatasetExperiment(data = data_neg,
sample_meta = sampledata,
variable_meta = metabolitedata,
name = 'Test')
View(metabolitedata)
View(sacSample)
dataMatrix <- matrix(rnorm(100), ncol = 10, nrow = 10)  # Replace with your actual data matrix
colData <- data.frame(condition = factor(rep(c("Control", "Treatment"), each = 5)))  # Replace with your sample metadata
se <- SummarizedExperiment(assays = list(counts = dataMatrix), colData = colData)
install.packages("SummarizedExperiment")
library(SummarizedExperiment)
se <- SummarizedExperiment(assays = list(counts = dataMatrix), colData = colData)
View(se)
se@colData
?DatasetExperiment
url = 'https://github.com/CIMCB/MetabWorkflowTutorial/raw/master/GastricCancer_NMR.xlsx'
# read in file directly from github...
# X=read.xlsx(url)
# ...or use BiocFileCache
path = bfcrpath(bfc,url)
# read in file directly from github...
X=read.xlsx(url)
url = 'https://github.com/CIMCB/MetabWorkflowTutorial/raw/master/GastricCancer_NMR.xlsx'
# read in file directly from github...
X=read.xlsx(url)
# ...or use BiocFileCache
# path = bfcrpath(bfc,url)
# X = read.xlsx(path)
# sample meta data
SM=X[,1:4]
rownames(SM)=SM$SampleID
# convert to factors
SM$SampleType=factor(SM$SampleType)
SM$Class=factor(SM$Class)
# keep a numeric version of class for regression
SM$Class_num = as.numeric(SM$Class)
## data matrix
# remove meta data
X[,1:4]=NULL
rownames(X)=SM$SampleID
# feature meta data
VM=data.frame(idx=1:ncol(X))
rownames(VM)=colnames(X)
# prepare DatasetExperiment
DE = DatasetExperiment(
data=X,
sample_meta=SM,
variable_meta=VM,
description='1H-NMR urinary metabolomic profiling for diagnosis of gastric cancer',
name='Gastric cancer (NMR)')
DE
# read in file directly from github...
X=read.xlsx(url)
# sample meta data
SM=X[,1:4]
View(SM)
View(X)
View(data_neg)
rownames(SM)=SM$SampleID
# convert to factors
SM$SampleType=factor(SM$SampleType)
# keep a numeric version of class for regression
SM$Class_num = as.numeric(SM$Class)
## data matrix
# remove meta data
X[,1:4]=NULL
rownames(X)=SM$SampleID
# feature meta data
VM=data.frame(idx=1:ncol(X))
rownames(VM)=colnames(X)
View(VM)
# prepare DatasetExperiment
DE = DatasetExperiment(
data=X,
sample_meta=SM,
variable_meta=VM,
description='1H-NMR urinary metabolomic profiling for diagnosis of gastric cancer',
name='Gastric cancer (NMR)')
DE
View(sacMeta)
View(sampledata)
View(sacMeta)
View(metabolitedata)
metabolitedata <- read.csv("Training/Data/metabolitedata.csv", sep = ",", row.names = 1, header = TRUE)
metabolitedata$annotation <- rownames(metabolitedata)
rownames(metabolitedata)=1:nrow(metabolitedata)
View(metabolitedata)
metabolitedata <- metabolitedata[metabolitedata$annotation == rownames(data_neg),]
metabolitedata <- metabolitedata[.metabolitedata$annotation == rownames(data_neg),]
metabolitedata <- metabolitedata[,metabolitedata$annotation == rownames(data_neg)]
metabolitedata <- metabolitedata[metabolitedata$annotation == colnames(data_neg),]
metabolitedata <- read.csv("Training/Data/metabolitedata.csv", sep = ",", row.names = 1, header = TRUE)
metabolitedata$annotation <- rownames(metabolitedata)
rownames(metabolitedata)=1:nrow(metabolitedata)
metabolitedata <- metabolitedata[metabolitedata$annotation == colnames(data_neg),]
metabolitedata <- read.csv("Training/Data/metabolitedata.csv", sep = ",", row.names = 1, header = TRUE)
metabolitedata$annotation <- rownames(metabolitedata)
rownames(metabolitedata)=1:nrow(metabolitedata)
metabolitedata <- metabolitedata[metabolitedata$annotation %in% colnames(data_neg),]
View(metabolitedata)
View(data_neg)
metabolitedata <- read.csv("Training/Data/metabolitedata.csv", sep = ",", row.names = 1, header = TRUE)
View(metabolitedata)
# Load data
data_pos <- read.csv("Training/Data/data_pos.csv", sep = ";", row.names = 1, header = TRUE, dec = ",")
data_neg <- read.csv("Training/Data/data_neg.csv", sep = ";", row.names = 1, header = TRUE, dec = ",")
# Load data
data_pos <- read.csv("Training/Data/data_pos.csv", sep = ",", row.names = 1, header = TRUE, dec = ",")
data_neg <- read.csv("Training/Data/data_neg.csv", sep = ";", row.names = 1, header = TRUE, dec = ",")
View(data_neg)
View(data)
View(data)
View(dataMatrix)
View(sampledata)
View(sacurine)
sacurine[["dataMatrix"]]
data_neg <- read.csv("Training/Data/data_neg.csv", sep = ";", row.names = 1, header = TRUE, dec = ",")
View(data_neg)
data_neg <- read.csv("Training/Data/data_neg.csv", sep = ";", row.names = 1, header = F, dec = ",")
View(data_neg)
metabolitedata <- metabolitedata[metabolitedata$annotation %in% data_neg[1,],]
metabolitedata <- read.csv("Training/Data/metabolitedata.csv", sep = ",", row.names = 1, header = TRUE)
metabolitedata$annotation <- rownames(metabolitedata)
rownames(metabolitedata)=1:nrow(metabolitedata)
metabolitedata <- metabolitedata[metabolitedata$annotation %in% data_neg[,1],]
View(DE)
View(metabolitedata)
metabolitedata <- metabolitedata[metabolitedata$annotation %in% data_neg[1,],]
metabolitedata <- read.csv("Training/Data/metabolitedata.csv", sep = ",", row.names = 1, header = TRUE)
metabolitedata$annotation <- rownames(metabolitedata)
metabolitedata <- metabolitedata[metabolitedata$annotation %in% data_neg[1,],]
rownames(metabolitedata)=1:nrow(metabolitedata)
metabolitedata <- read.csv("Training/Data/metabolitedata.csv", sep = ",", row.names = 1, header = TRUE)
metabolitedata$annotation <- rownames(metabolitedata)
rownames(metabolitedata)=1:nrow(metabolitedata)
metabolitedata <- metabolitedata[metabolitedata$annotation %in% data_neg[1,],]
View(metabolitedata)
View(metabolitedata)
metabolitedata <- read.csv("Training/Data/metabolitedata.csv", sep = ",", row.names = 1, header = TRUE)
metabolitedata <- metabolitedata[rownames(metabolitedata) %in% data_neg[1,],]
metabolitedata$annotation <- rownames(metabolitedata)
rownames(metabolitedata)=1:nrow(metabolitedata)
generate_experiment <- function(dataMatrix, sampleMetadata, metaboliteMetadata) {
# metaboliteMetadata$annotation=rownames(metaboliteMetadata)
# rownames(metaboliteMetadata)=1:nrow(metaboliteMetadata)
# colnames(dataMatrix)=1:ncol(dataMatrix)
# Create DatasetExperiment
DE <- DatasetExperiment(data = data_neg,
sample_meta = sampleMetadata,
variable_meta = metaboliteMetadata,
name = 'Test')
return(DE)
}
# Test function
test <- generate_experiment(data_neg, sampledata, metabolitedata)
# Create SummarizedExperiment object
se <- SummarizedExperiment(
assays = list(counts = data_neg),
colData = sampledata,
rowData = metabolitedata
)
# Load data
data_pos <- read.csv("Training/Data/data_pos.csv", sep = ",", row.names = 1, header = TRUE, dec = ",")
data_neg <- read.csv("Training/Data/data_neg.csv", sep = ";", row.names = 1, header = F, dec = ",")
# Load annotations
sampledata <- read.csv("Training/Data/sampleMetadata.csv", sep = ";", row.names = 1, header = TRUE, dec = ",")
metabolitedata <- read.csv("Training/Data/metabolitedata.csv", sep = ",", row.names = 1, header = TRUE)
# Create SummarizedExperiment object
se <- SummarizedExperiment(
assays = list(counts = data_neg),
colData = sampledata,
rowData = metabolitedata
)
# Create SummarizedExperiment object
se <- SummarizedExperiment(
assays = list(counts = as.matrix(data_neg)),  # Make sure data_neg is a matrix
colData = DataFrame(sampledata),  # Assuming sampledata is a data frame
rowData = DataFrame(metabolitedata)  # Assuming metabolitedata is a data frame
)
se <- SummarizedExperiment(
assays = list(counts = data_neg),
colData = sampledata,
rowData = metabolitedata
)
dim(data_neg)
class(data_neg)
# Create SummarizedExperiment object
se <- SummarizedExperiment(
assays = list(counts = as.matrix(data_neg)),
colData = sampledata,
rowData = metabolitedata
)
dim(sampledata)
dim(metabolitedata)
metabolitedata <- metabolitedata[rownames(metabolitedata) %in% data_neg[1,],]
metabolitedata$annotation <- rownames(metabolitedata)
rownames(metabolitedata)=1:nrow(metabolitedata)
# Create SummarizedExperiment object
se <- SummarizedExperiment(
assays = list(counts = as.matrix(data_neg)),
colData = sampledata,
rowData = metabolitedata
)
# Create SummarizedExperiment object
se <- SummarizedExperiment(
assays = list(counts = as.matrix(data_neg)),  # Make sure data_neg is a matrix
colData = DataFrame(sampledata),  # Assuming sampledata is a data frame
rowData = DataFrame(metabolitedata)  # Assuming metabolitedata is a data frame
)
# prepare model sequence
M = rsd_filter(rsd_threshold=20,qc_label='QC',factor_name='Class') +
mv_feature_filter(threshold = 10,method='across',factor_name='Class')
# apply model
M = model_apply(M,DE)
# get the model output
filtered = predicted(M)
# summary of filtered data
filtered
install.packages("languageserver")
install.packages("httpgd")
renv::snapshot()
# load xlsx
# # Original code
data('sacurine',package = 'ropls')
# load xlsx
# # Original code
data('sacurine',package = 'ropls')
## install additional bioc packages for vignette if needed
#BiocManager::install(c('pmp', 'ropls', 'BiocFileCache'))
## install additional CRAN packages if needed
#install.packages(c('cowplot', 'openxlsx'))
suppressPackageStartupMessages({
# Bioconductor packages
library(structToolbox)
library(pmp)
library(ropls)
library(BiocFileCache)
# CRAN libraries
library(ggplot2)
library(gridExtra)
library(cowplot)
library(openxlsx)
})
# use the BiocFileCache
bfc <- BiocFileCache(ask = FALSE)
url = 'https://github.com/CIMCB/MetabWorkflowTutorial/raw/master/GastricCancer_NMR.xlsx'
# read in file directly from github...
X=read.xlsx(url)
# sample meta data
SM=X[,1:4]
url = 'https://github.com/CIMCB/MetabWorkflowTutorial/raw/master/GastricCancer_NMR.xlsx'
# read in file directly from github...
X=read.xlsx(url)
# sample meta data
SM=X[,1:4]
View(X)
View(SM)
rownames(SM)=SM$SampleID
# convert to factors
SM$SampleType=factor(SM$SampleType)
SM$Class=factor(SM$Class)
# keep a numeric version of class for regression
SM$Class_num = as.numeric(SM$Class)
## data matrix
# remove meta data
X[,1:4]=NULL
rownames(X)=SM$SampleID
# feature meta data
VM=data.frame(idx=1:ncol(X))
View(VM)
rownames(VM)=colnames(X)
View(VM)
View(X)
# prepare DatasetExperiment
DE = DatasetExperiment(
data=X,
sample_meta=SM,
variable_meta=VM,
description='1H-NMR urinary metabolomic profiling for diagnosis of gastric cancer',
name='Gastric cancer (NMR)')
DE
View(X)
View(SM)
?mv_feature_filter
# prepare model sequence
M = rsd_filter(rsd_threshold=20,qc_label='QC',factor_name='Class') +
mv_feature_filter(threshold = 10,method='across',factor_name='Class')
# apply model
M = model_apply(M,DE)
# get the model output
filtered = predicted(M)
# summary of filtered data
filtered
# summary of filtered data
DE
filtered
# prepare model sequence
M = rsd_filter(rsd_threshold=20,qc_label='QC',factor_name='Class') +
mv_feature_filter(threshold = 10,method='across',factor_name='Class')
# apply model
M = model_apply(M,DE)
# get the model output
filtered = predicted(M)
# summary of filtered data
DE
filtered
?predicted
# prepare the model sequence
M = log_transform(base = 10) +
autoscale() +
knn_impute(neighbours = 3) +
PCA(number_components = 10)
# apply model sequence to data
M = model_apply(M,filtered)
# get the transformed, scaled and imputed matrix
TSI = predicted(M[3])
# scores plot
C = pca_scores_plot(factor_name = 'SampleType')
g1 = chart_plot(C,M[4])
# loadings plot
C = pca_loadings_plot()
g2 = chart_plot(C,M[4])
plot_grid(g1,g2,align='hv',nrow=1,axis='tblr')
